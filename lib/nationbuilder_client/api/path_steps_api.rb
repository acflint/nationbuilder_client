# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "cgi"

module NationbuilderClient
  class PathStepsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a path step
    # Creates a path step from given data. If the position you specify is already taken by another step on                   the path, your step will be placed at that position and that step and the steps following will be                   re-ordered. If you do not specify a position, the step will be auto-assigned to the last position in                   the list of path steps for the related path.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [PathStepCreateRequest] :path_step_create_request
    # @return [PathStepShowResponse]
    def create_path_step(opts = {})
      data, _status_code, _headers = create_path_step_with_http_info(opts)
      data
    end

    # Create a path step
    # Creates a path step from given data. If the position you specify is already taken by another step on                   the path, your step will be placed at that position and that step and the steps following will be                   re-ordered. If you do not specify a position, the step will be auto-assigned to the last position in                   the list of path steps for the related path.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [PathStepCreateRequest] :path_step_create_request
    # @return [Array<(PathStepShowResponse, Integer, Hash)>] PathStepShowResponse data, response status code and response headers
    def create_path_step_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PathStepsApi.create_path_step ..."
      end
      # resource path
      local_var_path = "/api/v2/path_steps"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[path_steps]"] = opts[:fields_path_steps] if !opts[:fields_path_steps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:path_step_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "PathStepShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"PathStepsApi.create_path_step",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PathStepsApi#create_path_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete path step with provided ID
    # Delete path step with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @return [EmptyMetaResponse]
    def delete_path_step(id, opts = {})
      data, _status_code, _headers = delete_path_step_with_http_info(id, opts)
      data
    end

    # Delete path step with provided ID
    # Delete path step with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @return [Array<(EmptyMetaResponse, Integer, Hash)>] EmptyMetaResponse data, response status code and response headers
    def delete_path_step_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PathStepsApi.delete_path_step ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PathStepsApi.delete_path_step"
      end
      # resource path
      local_var_path = "/api/v2/path_steps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[path_steps]"] = opts[:fields_path_steps] if !opts[:fields_path_steps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EmptyMetaResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"PathStepsApi.delete_path_step",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PathStepsApi#delete_path_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List all path steps in a nation
    # Lists all path steps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [PathStepIndexResponse]
    def list_path_steps(opts = {})
      data, _status_code, _headers = list_path_steps_with_http_info(opts)
      data
    end

    # List all path steps in a nation
    # Lists all path steps
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [Array<(PathStepIndexResponse, Integer, Hash)>] PathStepIndexResponse data, response status code and response headers
    def list_path_steps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PathStepsApi.list_path_steps ..."
      end
      # resource path
      local_var_path = "/api/v2/path_steps"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[path_steps]"] = opts[:fields_path_steps] if !opts[:fields_path_steps].nil?
      query_params[:"page[number]"] = opts[:page_number] if !opts[:page_number].nil?
      query_params[:"page[size]"] = opts[:page_size] if !opts[:page_size].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PathStepIndexResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"PathStepsApi.list_path_steps",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PathStepsApi#list_path_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Show path step with provided ID
    # Show path step with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @return [PathStepShowResponse]
    def show_path_step(id, opts = {})
      data, _status_code, _headers = show_path_step_with_http_info(id, opts)
      data
    end

    # Show path step with provided ID
    # Show path step with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @return [Array<(PathStepShowResponse, Integer, Hash)>] PathStepShowResponse data, response status code and response headers
    def show_path_step_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PathStepsApi.show_path_step ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PathStepsApi.show_path_step"
      end
      # resource path
      local_var_path = "/api/v2/path_steps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[path_steps]"] = opts[:fields_path_steps] if !opts[:fields_path_steps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "PathStepShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"PathStepsApi.show_path_step",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PathStepsApi#show_path_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update an existing path step
    # Updates an existing path step. If the position you specify is already taken by another step on                   the path, your step will be placed at that position and that step and the steps following will be                   re-ordered.
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [PathStepUpdateRequest] :path_step_update_request
    # @return [PathStepShowResponse]
    def update_path_step(id, opts = {})
      data, _status_code, _headers = update_path_step_with_http_info(id, opts)
      data
    end

    # Update an existing path step
    # Updates an existing path step. If the position you specify is already taken by another step on                   the path, your step will be placed at that position and that step and the steps following will be                   re-ordered.
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: path, default_point_person
    # @option opts [String] :fields_path_steps Comma-delimited list of attributes to only return in the response
    # @option opts [PathStepUpdateRequest] :path_step_update_request
    # @return [Array<(PathStepShowResponse, Integer, Hash)>] PathStepShowResponse data, response status code and response headers
    def update_path_step_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PathStepsApi.update_path_step ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PathStepsApi.update_path_step"
      end
      # resource path
      local_var_path = "/api/v2/path_steps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[path_steps]"] = opts[:fields_path_steps] if !opts[:fields_path_steps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:path_step_update_request])

      # return_type
      return_type = opts[:debug_return_type] || "PathStepShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"PathStepsApi.update_path_step",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PathStepsApi#update_path_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
