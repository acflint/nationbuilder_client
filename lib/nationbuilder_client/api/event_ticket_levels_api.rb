# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "cgi"

module NationbuilderClient
  class EventTicketLevelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an event ticket level
    # Creates an event ticket level. Ticket levels must be associated with an event, have a name, a number indicating how many tickets are included in a single purchase, a limit indicating the max number of tickets that can be sold, and an amount in cents indicating the cost of purchasing tickets at this ticket level.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [EventTicketLevelCreateRequest] :event_ticket_level_create_request
    # @return [EventTicketLevelShowResponse]
    def create_event_ticket_level(opts = {})
      data, _status_code, _headers = create_event_ticket_level_with_http_info(opts)
      data
    end

    # Create an event ticket level
    # Creates an event ticket level. Ticket levels must be associated with an event, have a name, a number indicating how many tickets are included in a single purchase, a limit indicating the max number of tickets that can be sold, and an amount in cents indicating the cost of purchasing tickets at this ticket level.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [EventTicketLevelCreateRequest] :event_ticket_level_create_request
    # @return [Array<(EventTicketLevelShowResponse, Integer, Hash)>] EventTicketLevelShowResponse data, response status code and response headers
    def create_event_ticket_level_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventTicketLevelsApi.create_event_ticket_level ..."
      end
      # resource path
      local_var_path = "/api/v2/event_ticket_levels"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_ticket_levels]"] = opts[:fields_event_ticket_levels] if !opts[:fields_event_ticket_levels].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:event_ticket_level_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "EventTicketLevelShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventTicketLevelsApi.create_event_ticket_level",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventTicketLevelsApi#create_event_ticket_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete event ticket level with provided ID
    # Delete event ticket level with provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @return [EmptyMetaResponse]
    def delete_event_ticket_level(id, opts = {})
      data, _status_code, _headers = delete_event_ticket_level_with_http_info(id, opts)
      data
    end

    # Delete event ticket level with provided ID
    # Delete event ticket level with provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @return [Array<(EmptyMetaResponse, Integer, Hash)>] EmptyMetaResponse data, response status code and response headers
    def delete_event_ticket_level_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventTicketLevelsApi.delete_event_ticket_level ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventTicketLevelsApi.delete_event_ticket_level"
      end
      # resource path
      local_var_path = "/api/v2/event_ticket_levels/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_ticket_levels]"] = opts[:fields_event_ticket_levels] if !opts[:fields_event_ticket_levels].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EmptyMetaResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventTicketLevelsApi.delete_event_ticket_level",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventTicketLevelsApi#delete_event_ticket_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List all event ticket levels in a nation
    # Lists all event ticket levels in the nation. To request ticket levels for a specific event, filter on event_id using query filtering, `filter[event_id]=123`. Both the Event and Event RSVPs associated with a ticket level can be sideloaded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [EventTicketLevelIndexResponse]
    def list_event_ticket_levels(opts = {})
      data, _status_code, _headers = list_event_ticket_levels_with_http_info(opts)
      data
    end

    # List all event ticket levels in a nation
    # Lists all event ticket levels in the nation. To request ticket levels for a specific event, filter on event_id using query filtering, &#x60;filter[event_id]&#x3D;123&#x60;. Both the Event and Event RSVPs associated with a ticket level can be sideloaded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [Array<(EventTicketLevelIndexResponse, Integer, Hash)>] EventTicketLevelIndexResponse data, response status code and response headers
    def list_event_ticket_levels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventTicketLevelsApi.list_event_ticket_levels ..."
      end
      # resource path
      local_var_path = "/api/v2/event_ticket_levels"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_ticket_levels]"] = opts[:fields_event_ticket_levels] if !opts[:fields_event_ticket_levels].nil?
      query_params[:"page[number]"] = opts[:page_number] if !opts[:page_number].nil?
      query_params[:"page[size]"] = opts[:page_size] if !opts[:page_size].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EventTicketLevelIndexResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventTicketLevelsApi.list_event_ticket_levels",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventTicketLevelsApi#list_event_ticket_levels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Show event ticket level with provided ID
    # Show event ticket level with provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @return [EventTicketLevelShowResponse]
    def show_event_ticket_level(id, opts = {})
      data, _status_code, _headers = show_event_ticket_level_with_http_info(id, opts)
      data
    end

    # Show event ticket level with provided ID
    # Show event ticket level with provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @return [Array<(EventTicketLevelShowResponse, Integer, Hash)>] EventTicketLevelShowResponse data, response status code and response headers
    def show_event_ticket_level_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventTicketLevelsApi.show_event_ticket_level ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventTicketLevelsApi.show_event_ticket_level"
      end
      # resource path
      local_var_path = "/api/v2/event_ticket_levels/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_ticket_levels]"] = opts[:fields_event_ticket_levels] if !opts[:fields_event_ticket_levels].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EventTicketLevelShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventTicketLevelsApi.show_event_ticket_level",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventTicketLevelsApi#show_event_ticket_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update an existing event ticket level
    # Updates an existing event ticket level with values provided in the payload.
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [EventTicketLevelUpdateRequest] :event_ticket_level_update_request
    # @return [EventTicketLevelShowResponse]
    def update_event_ticket_level(id, opts = {})
      data, _status_code, _headers = update_event_ticket_level_with_http_info(id, opts)
      data
    end

    # Update an existing event ticket level
    # Updates an existing event ticket level with values provided in the payload.
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: event, event_rsvps
    # @option opts [String] :fields_event_ticket_levels Comma-delimited list of attributes to only return in the response
    # @option opts [EventTicketLevelUpdateRequest] :event_ticket_level_update_request
    # @return [Array<(EventTicketLevelShowResponse, Integer, Hash)>] EventTicketLevelShowResponse data, response status code and response headers
    def update_event_ticket_level_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventTicketLevelsApi.update_event_ticket_level ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventTicketLevelsApi.update_event_ticket_level"
      end
      # resource path
      local_var_path = "/api/v2/event_ticket_levels/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_ticket_levels]"] = opts[:fields_event_ticket_levels] if !opts[:fields_event_ticket_levels].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:event_ticket_level_update_request])

      # return_type
      return_type = opts[:debug_return_type] || "EventTicketLevelShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventTicketLevelsApi.update_event_ticket_level",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventTicketLevelsApi#update_event_ticket_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
