# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "cgi"

module NationbuilderClient
  class SignupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a signup
    # Creates a signup from given data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupCreateRequest] :signup_create_request
    # @return [SignupShowResponse]
    def create_signup(opts = {})
      data, _status_code, _headers = create_signup_with_http_info(opts)
      data
    end

    # Create a signup
    # Creates a signup from given data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupCreateRequest] :signup_create_request
    # @return [Array<(SignupShowResponse, Integer, Hash)>] SignupShowResponse data, response status code and response headers
    def create_signup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.create_signup ..."
      end
      # resource path
      local_var_path = "/api/v2/signups"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:signup_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "SignupShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.create_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#create_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete signup with provided ID
    # Delete signup with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [EmptyMetaResponse]
    def delete_signup(id, opts = {})
      data, _status_code, _headers = delete_signup_with_http_info(id, opts)
      data
    end

    # Delete signup with provided ID
    # Delete signup with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [Array<(EmptyMetaResponse, Integer, Hash)>] EmptyMetaResponse data, response status code and response headers
    def delete_signup_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.delete_signup ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SignupsApi.delete_signup"
      end
      # resource path
      local_var_path = "/api/v2/signups/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EmptyMetaResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.delete_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#delete_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List all signups in a nation
    # Lists all signups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [String] :filter_nearby Filter signups by location (lat, long) and distance from the location in miles. Format for the parameter value is {\&quot;location\&quot;: \&quot;90.0,-180.0\&quot;, \&quot;distance\&quot;: 15}. If a distance is not provided, signups within 1 mile from the location will be returned.
    # @option opts [String] :filter_page_id Filters Signups by page_id, the id of the page they signed up from.
    # @option opts [String] :filter_with_email_address Filters signups by their associated email addresses. This filter will accept one of the following as a parameter: [eq, match, not_match, prefix, not_prefix, suffix, not_suffix]. The value is the email address to filter on.
    # @option opts [Boolean] :filter_with_bouncing_email Filter signups with bounced email addresses. When the value is true the filter returns signups that do have an email address marked as bounced. When the value is false the filter returns signups that do not have an email address marked as bounced
    # @option opts [String] :filter_tag_id
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [SignupIndexResponse]
    def list_signups(opts = {})
      data, _status_code, _headers = list_signups_with_http_info(opts)
      data
    end

    # List all signups in a nation
    # Lists all signups
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [String] :filter_nearby Filter signups by location (lat, long) and distance from the location in miles. Format for the parameter value is {\&quot;location\&quot;: \&quot;90.0,-180.0\&quot;, \&quot;distance\&quot;: 15}. If a distance is not provided, signups within 1 mile from the location will be returned.
    # @option opts [String] :filter_page_id Filters Signups by page_id, the id of the page they signed up from.
    # @option opts [String] :filter_with_email_address Filters signups by their associated email addresses. This filter will accept one of the following as a parameter: [eq, match, not_match, prefix, not_prefix, suffix, not_suffix]. The value is the email address to filter on.
    # @option opts [Boolean] :filter_with_bouncing_email Filter signups with bounced email addresses. When the value is true the filter returns signups that do have an email address marked as bounced. When the value is false the filter returns signups that do not have an email address marked as bounced
    # @option opts [String] :filter_tag_id
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [Array<(SignupIndexResponse, Integer, Hash)>] SignupIndexResponse data, response status code and response headers
    def list_signups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.list_signups ..."
      end
      # resource path
      local_var_path = "/api/v2/signups"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?
      query_params[:"filter[nearby]"] = opts[:filter_nearby] if !opts[:filter_nearby].nil?
      query_params[:"filter[page_id]"] = opts[:filter_page_id] if !opts[:filter_page_id].nil?
      query_params[:"filter[with_email_address]"] = opts[:filter_with_email_address] if !opts[:filter_with_email_address].nil?
      query_params[:"filter[with_bouncing_email]"] = opts[:filter_with_bouncing_email] if !opts[:filter_with_bouncing_email].nil?
      query_params[:"filter[tag_id]"] = opts[:filter_tag_id] if !opts[:filter_tag_id].nil?
      query_params[:"page[number]"] = opts[:page_number] if !opts[:page_number].nil?
      query_params[:"page[size]"] = opts[:page_size] if !opts[:page_size].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SignupIndexResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.list_signups",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#list_signups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Show signup assigned to auth token
    # Show signup assigned to auth token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [SignupShowResponse]
    def me_signup(opts = {})
      data, _status_code, _headers = me_signup_with_http_info(opts)
      data
    end

    # Show signup assigned to auth token
    # Show signup assigned to auth token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [Array<(SignupShowResponse, Integer, Hash)>] SignupShowResponse data, response status code and response headers
    def me_signup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.me_signup ..."
      end
      # resource path
      local_var_path = "/api/v2/signups/me"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SignupShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.me_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#me_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Push signup data into nation
    # This endpoint attempts to match the input person resource to a person already in the nation. If a match is found, the matched person is updated and a 200 status code is returned. If a match is not found, a new person is created and a 201 status code is returned. Matches are found by including one of the following IDs in the request:   - civicrm_id   - county_file_id   - dw_id   - external_id   - email   - facebook_username   - ngp_id   - salesforce_id   - twitter_login   - van_id  The push endpoint also accepts all sideposted data that is allowed on the signup resource's create and update endpoints. Please see the top-level sideposting documentation for more information on sideposting signup relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupCreateRequest] :signup_create_request
    # @return [SignupShowResponse]
    def push_signup(opts = {})
      data, _status_code, _headers = push_signup_with_http_info(opts)
      data
    end

    # Push signup data into nation
    # This endpoint attempts to match the input person resource to a person already in the nation. If a match is found, the matched person is updated and a 200 status code is returned. If a match is not found, a new person is created and a 201 status code is returned. Matches are found by including one of the following IDs in the request:   - civicrm_id   - county_file_id   - dw_id   - external_id   - email   - facebook_username   - ngp_id   - salesforce_id   - twitter_login   - van_id  The push endpoint also accepts all sideposted data that is allowed on the signup resource&#39;s create and update endpoints. Please see the top-level sideposting documentation for more information on sideposting signup relationships.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupCreateRequest] :signup_create_request
    # @return [Array<(SignupShowResponse, Integer, Hash)>] SignupShowResponse data, response status code and response headers
    def push_signup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.push_signup ..."
      end
      # resource path
      local_var_path = "/api/v2/signups/push"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:signup_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "SignupShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.push_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#push_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Show signup with provided ID
    # Show signup with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [SignupShowResponse]
    def show_signup(id, opts = {})
      data, _status_code, _headers = show_signup_with_http_info(id, opts)
      data
    end

    # Show signup with provided ID
    # Show signup with provided ID
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @return [Array<(SignupShowResponse, Integer, Hash)>] SignupShowResponse data, response status code and response headers
    def show_signup_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.show_signup ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SignupsApi.show_signup"
      end
      # resource path
      local_var_path = "/api/v2/signups/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SignupShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.show_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#show_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update an existing signup
    # Updates an existing signup
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupUpdateRequest] :signup_update_request
    # @return [SignupShowResponse]
    def update_signup(id, opts = {})
      data, _status_code, _headers = update_signup_with_http_info(id, opts)
      data
    end

    # Update an existing signup
    # Updates an existing signup
    # @param id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, last_contacted_by, page, parent, precinct, recruiter, signup_profile, voter, signup_tags, memberships, path_journeys, taggings, petition_signatures
    # @option opts [String] :fields_signups Comma-delimited list of attributes to only return in the response
    # @option opts [String] :extra_fields_signups Comma-delimited list of extra attributes, which are only returned in the response if requested. Extract attributes for this resource: billing_address, mailing_address, home_address, primary_address, registered_address, user_submitted_address, work_address, profile_image_url
    # @option opts [SignupUpdateRequest] :signup_update_request
    # @return [Array<(SignupShowResponse, Integer, Hash)>] SignupShowResponse data, response status code and response headers
    def update_signup_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SignupsApi.update_signup ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SignupsApi.update_signup"
      end
      # resource path
      local_var_path = "/api/v2/signups/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[signups]"] = opts[:fields_signups] if !opts[:fields_signups].nil?
      query_params[:"extra_fields[signups]"] = opts[:extra_fields_signups] if !opts[:extra_fields_signups].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:signup_update_request])

      # return_type
      return_type = opts[:debug_return_type] || "SignupShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"SignupsApi.update_signup",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SignupsApi#update_signup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
