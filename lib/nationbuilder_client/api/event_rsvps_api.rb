# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "cgi"

module NationbuilderClient
  class EventRsvpsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an event rsvp
    # Creates an event RSVP. Event RSVPs must contain enough signup data to find an existing signup in the nation, or create a new one. This means callers must provide a first name, last name, and email as part of the Event RSVP payload, which will be matched to an existing signup or will create a new signup with that data. Alternatively, callers may sidepost a signup resource as part of the payload. See sideposting documentation for details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [EventRsvpCreateRequest] :event_rsvp_create_request
    # @return [EventRsvpShowResponse]
    def create_event_rsvp(opts = {})
      data, _status_code, _headers = create_event_rsvp_with_http_info(opts)
      data
    end

    # Create an event rsvp
    # Creates an event RSVP. Event RSVPs must contain enough signup data to find an existing signup in the nation, or create a new one. This means callers must provide a first name, last name, and email as part of the Event RSVP payload, which will be matched to an existing signup or will create a new signup with that data. Alternatively, callers may sidepost a signup resource as part of the payload. See sideposting documentation for details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [EventRsvpCreateRequest] :event_rsvp_create_request
    # @return [Array<(EventRsvpShowResponse, Integer, Hash)>] EventRsvpShowResponse data, response status code and response headers
    def create_event_rsvp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventRsvpsApi.create_event_rsvp ..."
      end
      # resource path
      local_var_path = "/api/v2/event_rsvps"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_rsvps]"] = opts[:fields_event_rsvps] if !opts[:fields_event_rsvps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:event_rsvp_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "EventRsvpShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventRsvpsApi.create_event_rsvp",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventRsvpsApi#create_event_rsvp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete an event rsvp with provided ID
    # Delete the event RSVP matching the provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @return [EmptyMetaResponse]
    def delete_event_rsvp(id, opts = {})
      data, _status_code, _headers = delete_event_rsvp_with_http_info(id, opts)
      data
    end

    # Delete an event rsvp with provided ID
    # Delete the event RSVP matching the provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @return [Array<(EmptyMetaResponse, Integer, Hash)>] EmptyMetaResponse data, response status code and response headers
    def delete_event_rsvp_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventRsvpsApi.delete_event_rsvp ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventRsvpsApi.delete_event_rsvp"
      end
      # resource path
      local_var_path = "/api/v2/event_rsvps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_rsvps]"] = opts[:fields_event_rsvps] if !opts[:fields_event_rsvps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EmptyMetaResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventRsvpsApi.delete_event_rsvp",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventRsvpsApi#delete_event_rsvp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List all event rsvps in a nation
    # Lists all event RSVPs in a nation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [EventRsvpIndexResponse]
    def list_event_rsvps(opts = {})
      data, _status_code, _headers = list_event_rsvps_with_http_info(opts)
      data
    end

    # List all event rsvps in a nation
    # Lists all event RSVPs in a nation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [String] :page_number Page number to list (starting at 1)
    # @option opts [String] :page_size Number of results to display per page (default: 20, max: 100, min: 1)
    # @return [Array<(EventRsvpIndexResponse, Integer, Hash)>] EventRsvpIndexResponse data, response status code and response headers
    def list_event_rsvps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventRsvpsApi.list_event_rsvps ..."
      end
      # resource path
      local_var_path = "/api/v2/event_rsvps"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_rsvps]"] = opts[:fields_event_rsvps] if !opts[:fields_event_rsvps].nil?
      query_params[:"page[number]"] = opts[:page_number] if !opts[:page_number].nil?
      query_params[:"page[size]"] = opts[:page_size] if !opts[:page_size].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EventRsvpIndexResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventRsvpsApi.list_event_rsvps",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventRsvpsApi#list_event_rsvps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Show event rsvp with provided ID
    # Show the event RSVP matching the provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @return [EventRsvpShowResponse]
    def show_event_rsvp(id, opts = {})
      data, _status_code, _headers = show_event_rsvp_with_http_info(id, opts)
      data
    end

    # Show event rsvp with provided ID
    # Show the event RSVP matching the provided ID
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @return [Array<(EventRsvpShowResponse, Integer, Hash)>] EventRsvpShowResponse data, response status code and response headers
    def show_event_rsvp_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventRsvpsApi.show_event_rsvp ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventRsvpsApi.show_event_rsvp"
      end
      # resource path
      local_var_path = "/api/v2/event_rsvps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_rsvps]"] = opts[:fields_event_rsvps] if !opts[:fields_event_rsvps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "EventRsvpShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventRsvpsApi.show_event_rsvp",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventRsvpsApi#show_event_rsvp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update an existing event rsvp
    # Updates an existing event RSVP. Note that first name, last name, and email are NOT propagated to the event RSVP's signup. You must update the signup via a sidepost payload, or update the signup directly via the signup resource.
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [EventRsvpUpdateRequest] :event_rsvp_update_request
    # @return [EventRsvpShowResponse]
    def update_event_rsvp(id, opts = {})
      data, _status_code, _headers = update_event_rsvp_with_http_info(id, opts)
      data
    end

    # Update an existing event rsvp
    # Updates an existing event RSVP. Note that first name, last name, and email are NOT propagated to the event RSVP&#39;s signup. You must update the signup via a sidepost payload, or update the signup directly via the signup resource.
    # @param id [String] id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma-delimited list of sideloaded resources to include as part of the response. See guidance [here](/api/v2/docs#overview--paginating-sideloads) about sideloading large numbers of resources and pagination.  Supported sideloads: author, event, event_ticket_level, recruiter, signup
    # @option opts [String] :fields_event_rsvps Comma-delimited list of attributes to only return in the response
    # @option opts [EventRsvpUpdateRequest] :event_rsvp_update_request
    # @return [Array<(EventRsvpShowResponse, Integer, Hash)>] EventRsvpShowResponse data, response status code and response headers
    def update_event_rsvp_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EventRsvpsApi.update_event_rsvp ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EventRsvpsApi.update_event_rsvp"
      end
      # resource path
      local_var_path = "/api/v2/event_rsvps/{id}".sub("{" + "id" + "}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:include] = opts[:include] if !opts[:include].nil?
      query_params[:"fields[event_rsvps]"] = opts[:fields_event_rsvps] if !opts[:fields_event_rsvps].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"]) unless header_params["Accept"]
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      if !content_type.nil?
          header_params["Content-Type"] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:event_rsvp_update_request])

      # return_type
      return_type = opts[:debug_return_type] || "EventRsvpShowResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerAuth"]

      new_options = opts.merge(
        operation: :"EventRsvpsApi.update_event_rsvp",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventRsvpsApi#update_event_rsvp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
