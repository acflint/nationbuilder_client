# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "date"
require "time"

module NationbuilderClient
  class ContactReadWriteAttributes
    # The contact's author.
    attr_accessor :author_id

    # The contact's signup.
    attr_accessor :signup_id

    # The status.
    attr_accessor :contact_status

    # The contact method.
    attr_accessor :contact_method

    # The broadcaster of the contact.
    attr_accessor :broadcaster_id

    # The content of the contact.
    attr_accessor :content

    # Political capital awarded in this contact.
    attr_accessor :pc_in_cents

    # The path belonging to this contact.
    attr_accessor :path_id

    # The path step belonging to this contact.
    attr_accessor :path_step_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        author_id: :author_id,
        signup_id: :signup_id,
        contact_status: :contact_status,
        contact_method: :contact_method,
        broadcaster_id: :broadcaster_id,
        content: :content,
        pc_in_cents: :pc_in_cents,
        path_id: :path_id,
        path_step_id: :path_step_id
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        author_id: :String,
        signup_id: :String,
        contact_status: :String,
        contact_method: :String,
        broadcaster_id: :String,
        content: :String,
        pc_in_cents: :Integer,
        path_id: :String,
        path_step_id: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :author_id,
        :signup_id,
        :contact_status,
        :contact_method,
        :broadcaster_id,
        :content,
        :path_id,
        :path_step_id
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::ContactReadWriteAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::ContactReadWriteAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:author_id)
        self.author_id = attributes[:author_id]
      end

      if attributes.key?(:signup_id)
        self.signup_id = attributes[:signup_id]
      end

      if attributes.key?(:contact_status)
        self.contact_status = attributes[:contact_status]
      end

      if attributes.key?(:contact_method)
        self.contact_method = attributes[:contact_method]
      end

      if attributes.key?(:broadcaster_id)
        self.broadcaster_id = attributes[:broadcaster_id]
      end

      if attributes.key?(:content)
        self.content = attributes[:content]
      end

      self.pc_in_cents = if attributes.key?(:pc_in_cents)
        attributes[:pc_in_cents]
      else
        0
      end

      if attributes.key?(:path_id)
        self.path_id = attributes[:path_id]
      end

      if attributes.key?(:path_step_id)
        self.path_step_id = attributes[:path_step_id]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn "[DEPRECATED] the `list_invalid_properties` method is obsolete"
      []

    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn "[DEPRECATED] the `valid?` method is obsolete"
      contact_status_validator = EnumAttributeValidator.new("String", ["other", "answered", "bad_info", "left_message", "meaningful_interaction", "send_information", "not_interested", "no_answer", "refused", "inaccessible"])
      return false unless contact_status_validator.valid?(@contact_status)
      contact_method_validator = EnumAttributeValidator.new("String", ["delivery", "door_knock", "email", "email_blast", "face_to_face", "facebook", "meeting", "phone_call", "robocall", "snail_mail", "text", "text_1to1", "text_blast", "tweet", "video_call", "webinar", "linkedin", "other"])
      return false unless contact_method_validator.valid?(@contact_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contact_status Object to be assigned
    def contact_status=(contact_status)
      validator = EnumAttributeValidator.new("String", ["other", "answered", "bad_info", "left_message", "meaningful_interaction", "send_information", "not_interested", "no_answer", "refused", "inaccessible"])
      unless validator.valid?(contact_status)
        fail ArgumentError, "invalid value for \"contact_status\", must be one of #{validator.allowable_values}."
      end
      @contact_status = contact_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contact_method Object to be assigned
    def contact_method=(contact_method)
      validator = EnumAttributeValidator.new("String", ["delivery", "door_knock", "email", "email_blast", "face_to_face", "facebook", "meeting", "phone_call", "robocall", "snail_mail", "text", "text_1to1", "text_blast", "tweet", "video_call", "webinar", "linkedin", "other"])
      unless validator.valid?(contact_method)
        fail ArgumentError, "invalid value for \"contact_method\", must be one of #{validator.allowable_values}."
      end
      @contact_method = contact_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
          author_id == other.author_id &&
          signup_id == other.signup_id &&
          contact_status == other.contact_status &&
          contact_method == other.contact_method &&
          broadcaster_id == other.broadcaster_id &&
          content == other.content &&
          pc_in_cents == other.pc_in_cents &&
          path_id == other.path_id &&
          path_step_id == other.path_step_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [author_id, signup_id, contact_status, contact_method, broadcaster_id, content, pc_in_cents, path_id, path_step_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        (klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of)) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
