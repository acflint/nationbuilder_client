=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class ImportReadOnlyAttributes
    # The status of the import.
    attr_accessor :status

    # The import type.
    attr_accessor :type

    # Flag used to determine whether non-empty fields are overwritten. Defaults to false.
    attr_accessor :is_overwritable

    attr_accessor :created_at

    attr_accessor :updated_at

    # File name of the import.
    attr_accessor :file_name

    # Assign these tags to the imported signups.
    attr_accessor :tag_list

    # Comma separated list containing attribute names for the import.
    attr_accessor :content_head

    # Number of successfully imported rows.
    attr_accessor :rows_successful

    # Number of unsuccessfully imported rows.
    attr_accessor :rows_unsuccessful

    # When the import started.
    attr_accessor :started_at

    # When the import finished.
    attr_accessor :finished_at

    # Errors created during the import.
    attr_accessor :error_lines

    # Number of updated rows.
    attr_accessor :rows_updated

    # Number of lines in the import.
    attr_accessor :lines_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'type' => :'type',
        :'is_overwritable' => :'is_overwritable',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'file_name' => :'file_name',
        :'tag_list' => :'tag_list',
        :'content_head' => :'content_head',
        :'rows_successful' => :'rows_successful',
        :'rows_unsuccessful' => :'rows_unsuccessful',
        :'started_at' => :'started_at',
        :'finished_at' => :'finished_at',
        :'error_lines' => :'error_lines',
        :'rows_updated' => :'rows_updated',
        :'lines_count' => :'lines_count'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'type' => :'String',
        :'is_overwritable' => :'Boolean',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'file_name' => :'String',
        :'tag_list' => :'String',
        :'content_head' => :'String',
        :'rows_successful' => :'Integer',
        :'rows_unsuccessful' => :'Integer',
        :'started_at' => :'String',
        :'finished_at' => :'String',
        :'error_lines' => :'String',
        :'rows_updated' => :'Integer',
        :'lines_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'status',
        :'type',
        :'is_overwritable',
        :'created_at',
        :'updated_at',
        :'file_name',
        :'tag_list',
        :'content_head',
        :'rows_successful',
        :'rows_unsuccessful',
        :'started_at',
        :'finished_at',
        :'error_lines',
        :'rows_updated',
        :'lines_count'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::ImportReadOnlyAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::ImportReadOnlyAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'is_overwritable')
        self.is_overwritable = attributes[:'is_overwritable']
      else
        self.is_overwritable = false
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'file_name')
        self.file_name = attributes[:'file_name']
      end

      if attributes.key?(:'tag_list')
        self.tag_list = attributes[:'tag_list']
      end

      if attributes.key?(:'content_head')
        self.content_head = attributes[:'content_head']
      end

      if attributes.key?(:'rows_successful')
        self.rows_successful = attributes[:'rows_successful']
      end

      if attributes.key?(:'rows_unsuccessful')
        self.rows_unsuccessful = attributes[:'rows_unsuccessful']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'error_lines')
        self.error_lines = attributes[:'error_lines']
      end

      if attributes.key?(:'rows_updated')
        self.rows_updated = attributes[:'rows_updated']
      end

      if attributes.key?(:'lines_count')
        self.lines_count = attributes[:'lines_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      status_validator = EnumAttributeValidator.new('String', ["finished", "unprocessable", "queueing", "in_progress"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["finished", "unprocessable", "queueing", "in_progress"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          type == o.type &&
          is_overwritable == o.is_overwritable &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          file_name == o.file_name &&
          tag_list == o.tag_list &&
          content_head == o.content_head &&
          rows_successful == o.rows_successful &&
          rows_unsuccessful == o.rows_unsuccessful &&
          started_at == o.started_at &&
          finished_at == o.finished_at &&
          error_lines == o.error_lines &&
          rows_updated == o.rows_updated &&
          lines_count == o.lines_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, type, is_overwritable, created_at, updated_at, file_name, tag_list, content_head, rows_successful, rows_unsuccessful, started_at, finished_at, error_lines, rows_updated, lines_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
