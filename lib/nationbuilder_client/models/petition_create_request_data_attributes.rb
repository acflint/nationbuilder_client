=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class PetitionCreateRequestDataAttributes
    # The intro is rendered on the petition page above the content.
    attr_accessor :intro

    # The content is rendered on the petition page.
    attr_accessor :content

    # The number of signatures you want this petition to receive.
    attr_accessor :goal

    # Number of offline signatures to add to the signature count total.
    attr_accessor :additional_signatures_count

    # What you call a signature.
    attr_accessor :signature_name

    # Sends an autoresponse to a signup after signing the petition.
    attr_accessor :is_auto_response

    # The broadcaster that sends the autoresponse.
    attr_accessor :auto_response_broadcaster_id

    # The subject in the autoresponse email.
    attr_accessor :auto_response_subject

    # The content of the autoresponse email.
    attr_accessor :auto_response_content

    # Ask for signers to volunteer.
    attr_accessor :gather_volunteers

    # Require or ask signers to include their address in the signature.
    attr_accessor :petition_form_address

    # Require or ask signers to include their phone number in the signature.
    attr_accessor :petition_form_phone

    # The associated page.
    attr_accessor :page_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'intro' => :'intro',
        :'content' => :'content',
        :'goal' => :'goal',
        :'additional_signatures_count' => :'additional_signatures_count',
        :'signature_name' => :'signature_name',
        :'is_auto_response' => :'is_auto_response',
        :'auto_response_broadcaster_id' => :'auto_response_broadcaster_id',
        :'auto_response_subject' => :'auto_response_subject',
        :'auto_response_content' => :'auto_response_content',
        :'gather_volunteers' => :'gather_volunteers',
        :'petition_form_address' => :'petition_form_address',
        :'petition_form_phone' => :'petition_form_phone',
        :'page_id' => :'page_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'intro' => :'String',
        :'content' => :'String',
        :'goal' => :'Integer',
        :'additional_signatures_count' => :'Integer',
        :'signature_name' => :'String',
        :'is_auto_response' => :'Boolean',
        :'auto_response_broadcaster_id' => :'String',
        :'auto_response_subject' => :'String',
        :'auto_response_content' => :'String',
        :'gather_volunteers' => :'Boolean',
        :'petition_form_address' => :'String',
        :'petition_form_phone' => :'String',
        :'page_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'intro',
        :'content',
        :'goal',
        :'additional_signatures_count',
        :'signature_name',
        :'is_auto_response',
        :'auto_response_broadcaster_id',
        :'auto_response_subject',
        :'auto_response_content',
        :'gather_volunteers',
        :'petition_form_address',
        :'petition_form_phone',
        :'page_id'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'PetitionReadWriteAttributes',
      :'PetitionWriteOnlyAttributes'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::PetitionCreateRequestDataAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::PetitionCreateRequestDataAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'intro')
        self.intro = attributes[:'intro']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'goal')
        self.goal = attributes[:'goal']
      else
        self.goal = 0
      end

      if attributes.key?(:'additional_signatures_count')
        self.additional_signatures_count = attributes[:'additional_signatures_count']
      else
        self.additional_signatures_count = 0
      end

      if attributes.key?(:'signature_name')
        self.signature_name = attributes[:'signature_name']
      end

      if attributes.key?(:'is_auto_response')
        self.is_auto_response = attributes[:'is_auto_response']
      else
        self.is_auto_response = true
      end

      if attributes.key?(:'auto_response_broadcaster_id')
        self.auto_response_broadcaster_id = attributes[:'auto_response_broadcaster_id']
      end

      if attributes.key?(:'auto_response_subject')
        self.auto_response_subject = attributes[:'auto_response_subject']
      end

      if attributes.key?(:'auto_response_content')
        self.auto_response_content = attributes[:'auto_response_content']
      end

      if attributes.key?(:'gather_volunteers')
        self.gather_volunteers = attributes[:'gather_volunteers']
      end

      if attributes.key?(:'petition_form_address')
        self.petition_form_address = attributes[:'petition_form_address']
      end

      if attributes.key?(:'petition_form_phone')
        self.petition_form_phone = attributes[:'petition_form_phone']
      end

      if attributes.key?(:'page_id')
        self.page_id = attributes[:'page_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      petition_form_address_validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      return false unless petition_form_address_validator.valid?(@petition_form_address)
      petition_form_phone_validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      return false unless petition_form_phone_validator.valid?(@petition_form_phone)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] petition_form_address Object to be assigned
    def petition_form_address=(petition_form_address)
      validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      unless validator.valid?(petition_form_address)
        fail ArgumentError, "invalid value for \"petition_form_address\", must be one of #{validator.allowable_values}."
      end
      @petition_form_address = petition_form_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] petition_form_phone Object to be assigned
    def petition_form_phone=(petition_form_phone)
      validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      unless validator.valid?(petition_form_phone)
        fail ArgumentError, "invalid value for \"petition_form_phone\", must be one of #{validator.allowable_values}."
      end
      @petition_form_phone = petition_form_phone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          intro == o.intro &&
          content == o.content &&
          goal == o.goal &&
          additional_signatures_count == o.additional_signatures_count &&
          signature_name == o.signature_name &&
          is_auto_response == o.is_auto_response &&
          auto_response_broadcaster_id == o.auto_response_broadcaster_id &&
          auto_response_subject == o.auto_response_subject &&
          auto_response_content == o.auto_response_content &&
          gather_volunteers == o.gather_volunteers &&
          petition_form_address == o.petition_form_address &&
          petition_form_phone == o.petition_form_phone &&
          page_id == o.page_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [intro, content, goal, additional_signatures_count, signature_name, is_auto_response, auto_response_broadcaster_id, auto_response_subject, auto_response_content, gather_volunteers, petition_form_address, petition_form_phone, page_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
