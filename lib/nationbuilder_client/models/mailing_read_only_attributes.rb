=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class MailingReadOnlyAttributes
    # A unique identifier.
    attr_accessor :slug

    # An internal description of the email.
    attr_accessor :description

    # The email's subject line.
    attr_accessor :subject

    # The from line in an email.
    attr_accessor :from

    # When the mailing was published.
    attr_accessor :published_at

    attr_accessor :created_at

    attr_accessor :updated_at

    # When the mailing was queued to send.
    attr_accessor :queued_at

    # Comma separated list of tags used as the source of recipients for the mailing.
    attr_accessor :tag_list

    # The list used as the source of recipients for the mailing.
    attr_accessor :custom_list_id

    # When the mailing is scheduled to be sent.
    attr_accessor :send_at

    # When the mailing was canceled.
    attr_accessor :canceled_at

    # The name of the email blast
    attr_accessor :name

    # Preheader text that is displayed in an email cient's inbox
    attr_accessor :preheader

    # The broadcaster that created the mailing.
    attr_accessor :broadcaster_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'slug' => :'slug',
        :'description' => :'description',
        :'subject' => :'subject',
        :'from' => :'from',
        :'published_at' => :'published_at',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'queued_at' => :'queued_at',
        :'tag_list' => :'tag_list',
        :'custom_list_id' => :'custom_list_id',
        :'send_at' => :'send_at',
        :'canceled_at' => :'canceled_at',
        :'name' => :'name',
        :'preheader' => :'preheader',
        :'broadcaster_id' => :'broadcaster_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'slug' => :'String',
        :'description' => :'String',
        :'subject' => :'String',
        :'from' => :'String',
        :'published_at' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'queued_at' => :'String',
        :'tag_list' => :'String',
        :'custom_list_id' => :'String',
        :'send_at' => :'String',
        :'canceled_at' => :'String',
        :'name' => :'String',
        :'preheader' => :'String',
        :'broadcaster_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'slug',
        :'description',
        :'subject',
        :'from',
        :'published_at',
        :'created_at',
        :'updated_at',
        :'queued_at',
        :'tag_list',
        :'custom_list_id',
        :'send_at',
        :'canceled_at',
        :'name',
        :'preheader',
        :'broadcaster_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::MailingReadOnlyAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::MailingReadOnlyAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'published_at')
        self.published_at = attributes[:'published_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'queued_at')
        self.queued_at = attributes[:'queued_at']
      end

      if attributes.key?(:'tag_list')
        self.tag_list = attributes[:'tag_list']
      end

      if attributes.key?(:'custom_list_id')
        self.custom_list_id = attributes[:'custom_list_id']
      end

      if attributes.key?(:'send_at')
        self.send_at = attributes[:'send_at']
      end

      if attributes.key?(:'canceled_at')
        self.canceled_at = attributes[:'canceled_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'preheader')
        self.preheader = attributes[:'preheader']
      end

      if attributes.key?(:'broadcaster_id')
        self.broadcaster_id = attributes[:'broadcaster_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          slug == o.slug &&
          description == o.description &&
          subject == o.subject &&
          from == o.from &&
          published_at == o.published_at &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          queued_at == o.queued_at &&
          tag_list == o.tag_list &&
          custom_list_id == o.custom_list_id &&
          send_at == o.send_at &&
          canceled_at == o.canceled_at &&
          name == o.name &&
          preheader == o.preheader &&
          broadcaster_id == o.broadcaster_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [slug, description, subject, from, published_at, created_at, updated_at, queued_at, tag_list, custom_list_id, send_at, canceled_at, name, preheader, broadcaster_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
