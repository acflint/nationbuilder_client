=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class SurveyQuestionResponseResponseDataAttributes
    # The survey question this response belongs to.
    attr_accessor :survey_question_id

    # The response chosen by the signup.
    attr_accessor :survey_question_possible_response_id

    # The signup that answered the survey.
    attr_accessor :signup_id

    # The author of this response.
    attr_accessor :author_id

    # The response to a text question.
    attr_accessor :content

    # The format of the question.
    attr_accessor :question_format

    attr_accessor :created_at

    attr_accessor :updated_at

    # The page the survey belongs to, if any
    attr_accessor :page_id

    attr_accessor :is_skipped

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'survey_question_id' => :'survey_question_id',
        :'survey_question_possible_response_id' => :'survey_question_possible_response_id',
        :'signup_id' => :'signup_id',
        :'author_id' => :'author_id',
        :'content' => :'content',
        :'question_format' => :'question_format',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'page_id' => :'page_id',
        :'is_skipped' => :'is_skipped'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'survey_question_id' => :'String',
        :'survey_question_possible_response_id' => :'String',
        :'signup_id' => :'String',
        :'author_id' => :'String',
        :'content' => :'String',
        :'question_format' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'page_id' => :'String',
        :'is_skipped' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'survey_question_id',
        :'survey_question_possible_response_id',
        :'signup_id',
        :'author_id',
        :'content',
        :'question_format',
        :'created_at',
        :'updated_at',
        :'page_id',
        :'is_skipped'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'SurveyQuestionResponseReadOnlyAttributes',
      :'SurveyQuestionResponseReadWriteAttributes'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::SurveyQuestionResponseResponseDataAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::SurveyQuestionResponseResponseDataAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'survey_question_id')
        self.survey_question_id = attributes[:'survey_question_id']
      end

      if attributes.key?(:'survey_question_possible_response_id')
        self.survey_question_possible_response_id = attributes[:'survey_question_possible_response_id']
      end

      if attributes.key?(:'signup_id')
        self.signup_id = attributes[:'signup_id']
      end

      if attributes.key?(:'author_id')
        self.author_id = attributes[:'author_id']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'question_format')
        self.question_format = attributes[:'question_format']
      else
        self.question_format = 'multiple_choice'
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'page_id')
        self.page_id = attributes[:'page_id']
      end

      if attributes.key?(:'is_skipped')
        self.is_skipped = attributes[:'is_skipped']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      question_format_validator = EnumAttributeValidator.new('String', ["multiple_choice", "yes_no", "text"])
      return false unless question_format_validator.valid?(@question_format)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] question_format Object to be assigned
    def question_format=(question_format)
      validator = EnumAttributeValidator.new('String', ["multiple_choice", "yes_no", "text"])
      unless validator.valid?(question_format)
        fail ArgumentError, "invalid value for \"question_format\", must be one of #{validator.allowable_values}."
      end
      @question_format = question_format
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          survey_question_id == o.survey_question_id &&
          survey_question_possible_response_id == o.survey_question_possible_response_id &&
          signup_id == o.signup_id &&
          author_id == o.author_id &&
          content == o.content &&
          question_format == o.question_format &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          page_id == o.page_id &&
          is_skipped == o.is_skipped
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [survey_question_id, survey_question_possible_response_id, signup_id, author_id, content, question_format, created_at, updated_at, page_id, is_skipped].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
