=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class SignupResponseDataAttributes
    # The date the signup was born.
    attr_accessor :born_at

    # The city district code the signup belongs to.
    attr_accessor :city_district

    # The ID of the CiviCRM account the signup is associated with.
    attr_accessor :civicrm_id

    # The county district the signup belongs to.
    attr_accessor :county_district

    # The ID of the county voter file belonging to the signup.
    attr_accessor :county_file_id

    # The ID of the associated Datatrust account.
    attr_accessor :datatrust_id

    # Signup has asked not to be contacted via phone call.
    attr_accessor :do_not_call

    # Signup has asked not to be contacted.
    attr_accessor :do_not_contact

    # The Catalist ID associated with the signup.
    attr_accessor :dw_id

    # The signup's email address.
    attr_accessor :email

    # The signup has opted in to receive emails.
    attr_accessor :email_opt_in

    # The signup's employer.
    attr_accessor :employer

    # A unique identifier from a third party.
    attr_accessor :external_id

    # Federal voting district the signup belongs to.
    attr_accessor :federal_district

    # Political district only available in a voter file import.
    attr_accessor :fire_district

    # Signup's first name.
    attr_accessor :first_name

    # The signup is a volunteer in your nation.
    attr_accessor :is_volunteer

    # Political district only available in a voter file import.
    attr_accessor :judicial_district

    # British voting district.
    attr_accessor :labour_region

    # The signup's last name.
    attr_accessor :last_name

    # The signup's cell phone number.
    attr_accessor :mobile_number

    # The signup has opted in to mobile phone contact.
    attr_accessor :mobile_opt_in

    # Signup's middle name.
    attr_accessor :middle_name

    # ID from associated NGP account.
    attr_accessor :ngp_id

    # Important information to remember about the signup.
    attr_accessor :note

    # The signup's occupation.
    attr_accessor :occupation

    # Single letter abbreviation for political party.
    attr_accessor :party

    # PoliticalFORCE ID.
    attr_accessor :pf_strat_id

    # Signup's phone number.
    attr_accessor :phone_number

    # Voting precinct the signup belongs to.
    attr_accessor :precinct_id

    # ID of the signup's recruiter (also a signup).
    attr_accessor :recruiter_id

    # RNC ID.
    attr_accessor :rnc_id

    # RNC registration ID.
    attr_accessor :rnc_regid

    # ID of the associated Salesforce account.
    attr_accessor :salesforce_id

    # School district the signup belongs to.
    attr_accessor :school_district

    # School sub-district the signup belongs to.
    attr_accessor :school_sub_district

    # Must be a single letter: M, F, or O (male, female, or other).
    attr_accessor :sex

    # Indicates whether the record represents a person or an organization. Must be a single digit: 0 or 1 (0=person, 1=organization).
    attr_accessor :signup_type

    # Unique identifier if mapped with the registered state field. May be zero filled to number of digits defined by state.
    attr_accessor :state_file_id

    # Voting district.
    attr_accessor :state_lower_district

    # Voting district.
    attr_accessor :state_upper_district

    # A number from 1-5. 1=very strong support and 5=very strong opposition.
    attr_accessor :support_level

    # Voting district.
    attr_accessor :supranational_district

    # ID of the associated VAN account.
    attr_accessor :van_id

    # Political district only available in a voter file import.
    attr_accessor :village_district

    # Political district only available in a voter file import.
    attr_accessor :ward

    # Signup's work phone number.
    attr_accessor :work_phone_number

    # ID of the person interacting with the signup in the control panel.
    attr_accessor :author_id

    # When can this signup be contacted?
    attr_accessor :availability

    # When the signup was banned.
    attr_accessor :banned_at

    # The amount of political capital this signup has accrued
    attr_accessor :capital_amount_in_cents

    # The name of the church the signup belongs to.
    attr_accessor :church

    # Political district.
    attr_accessor :city_sub_district

    # Name of the associated contact status.
    attr_accessor :contact_status

    # Integer representing if the signup can vote. 1=can vote, -1=can't vote.
    attr_accessor :could_vote_status

    # Single letter representation of demographic.
    attr_accessor :demo

    # Sum of donations made by the signup.
    attr_accessor :donations_amount_in_cents

    # Sum of donations made by the signup in the current cycle.
    attr_accessor :donations_amount_this_cycle_in_cents

    # Number of donations made by the signup.
    attr_accessor :donations_count

    # Number of donations made by the signup in the current cycle.
    attr_accessor :donations_count_this_cycle

    # Sum of pledges made by the signup.
    attr_accessor :donations_pledged_amount_in_cents

    # Sum of donations raised by the signup.
    attr_accessor :donations_raised_amount_in_cents

    # Sum of donations raised by the signup in the current cycle.
    attr_accessor :donations_raised_amount_this_cycle_in_cents

    # Number of donations raised by this signup.
    attr_accessor :donations_raised_count

    # Number of donations raised by this signup in the current cycle.
    attr_accessor :donations_raised_count_this_cycle

    # Sum of donations that need to be raised.
    attr_accessor :donations_to_raise_amount_in_cents

    # Email address for the signup.
    attr_accessor :email1

    # The address is not emailable.
    attr_accessor :email1_is_bad

    # Email address for the signup.
    attr_accessor :email2

    # The address is not emailable.
    attr_accessor :email2_is_bad

    # Email address for the signup.
    attr_accessor :email3

    # The address is not emailable.
    attr_accessor :email3_is_bad

    # Email address for the signup.
    attr_accessor :email4

    # The address is not emailable.
    attr_accessor :email4_is_bad

    # Signup's ethnicity.
    attr_accessor :ethnicity

    # Signup's fax number.
    attr_accessor :fax_number

    # Is the signup on the federal do not call list?
    attr_accessor :federal_donotcall

    # The first time the signup made a donation.
    attr_accessor :first_donated_at

    # The first time the signup fundraised.
    attr_accessor :first_fundraised_at

    # The first time the signup was marked as a prospect.
    attr_accessor :first_prospect_at

    # The first time the signup recruited another signup.
    attr_accessor :first_recruited_at

    # The first time the signup was marked as a supporter.
    attr_accessor :first_supporter_at

    # The first time the signup volunteered.
    attr_accessor :first_volunteer_at

    # The id of the import that added the signup.
    attr_accessor :import_id

    # Single letter representation of the signup's inferred political party.
    attr_accessor :inferred_party

    # The signup's inferred support level. 1=very strong support and 5=very strong opposition.
    attr_accessor :inferred_support_level

    # The signup is deceased.
    attr_accessor :is_deceased

    # The signup is a fundraiser.
    attr_accessor :is_fundraiser

    # Ignore donation limits for this signup.
    attr_accessor :is_ignore_donation_limits

    # The signup can appear on leaderboards.
    attr_accessor :is_leaderboardable

    # The signup's mobile number is bad.
    attr_accessor :is_mobile_bad

    # The signup could be a duplicate.
    attr_accessor :is_possible_duplicate

    # The signup's profile is private.
    attr_accessor :is_profile_private

    # The profile is searchable.
    attr_accessor :is_profile_searchable

    # The signup is a prospect.
    attr_accessor :is_prospect

    # The signup is a supporter.
    attr_accessor :is_supporter

    # Survey questions are private for this signup.
    attr_accessor :is_survey_question_private

    # The primary language of the signup.
    attr_accessor :language

    # ID of the last call made to the signup.
    attr_accessor :last_call_id

    # The last time the signup was contacted.
    attr_accessor :last_contacted_at

    # The ID of the user that last contacted the signup.
    attr_accessor :last_contacted_by_id

    # The last time the signup donated.
    attr_accessor :last_donated_at

    # The last time the signup fundraised.
    attr_accessor :last_fundraised_at

    # The last time the signup violated a rule.
    attr_accessor :last_rule_violation_at

    # The signup's legal name.
    attr_accessor :legal_name

    # Letter code representing the signup\\s language.
    attr_accessor :locale

    # Single letter representation of the signup's marital status.
    attr_accessor :marital_status

    # Signup's parent ID.
    attr_accessor :parent_id

    # Political party membership.
    attr_accessor :party_member

    # Best time to contact the signup.
    attr_accessor :phone_time

    # Signup's prefix.
    attr_accessor :prefix

    # Single letter representing the signup's previous political party affiliation.
    attr_accessor :previous_party

    # The email column containing the primary email of the signup.
    attr_accessor :primary_email_id

    # Priority level of the signup.
    attr_accessor :priority_level

    # The contents of the signup's profile.
    attr_accessor :profile_content

    # Headline of the signup's profile.
    attr_accessor :profile_headline

    # Amount of social capital received.
    attr_accessor :received_capital_amount_in_cents

    # When was the signup registered.
    attr_accessor :registered_at

    # Signup's religion.
    attr_accessor :religion

    # Number of rules the signup has violated.
    attr_accessor :rule_violations_count

    # Amount of social capital spent.
    attr_accessor :spent_capital_amount_in_cents

    # The address submitted by the signup.
    attr_accessor :submitted_address

    # Signup's suffix.
    attr_accessor :suffix

    # Political district only available in a voter file import.
    attr_accessor :township

    # When the signup unsubscribed.
    attr_accessor :unsubscribed_at

    # Signup's username.
    attr_accessor :username

    # Number of warnings given to the signup.
    attr_accessor :warnings_count

    # Values for nation-defined fields on signup
    attr_accessor :custom_values

    # Email marked as bounced
    attr_accessor :email1_is_bouncing

    # Email marked as bounced
    attr_accessor :email2_is_bouncing

    # Email marked as bounced
    attr_accessor :email3_is_bouncing

    # Email marked as bounced
    attr_accessor :email4_is_bouncing

    # Signup's full name.
    attr_accessor :full_name

    # Is the signup a control panel user
    attr_accessor :is_cpu

    # The signup is a donor.
    attr_accessor :is_donor

    # Last time the note was updated.
    attr_accessor :note_updated_at

    # The last time the priority level changed.
    attr_accessor :priority_level_changed_at

    # HTML formatted version of the signup's profile contents.
    attr_accessor :profile_content_html

    # When the signups support level changed.
    attr_accessor :support_level_changed_at

    attr_accessor :updated_at

    attr_accessor :created_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'born_at' => :'born_at',
        :'city_district' => :'city_district',
        :'civicrm_id' => :'civicrm_id',
        :'county_district' => :'county_district',
        :'county_file_id' => :'county_file_id',
        :'datatrust_id' => :'datatrust_id',
        :'do_not_call' => :'do_not_call',
        :'do_not_contact' => :'do_not_contact',
        :'dw_id' => :'dw_id',
        :'email' => :'email',
        :'email_opt_in' => :'email_opt_in',
        :'employer' => :'employer',
        :'external_id' => :'external_id',
        :'federal_district' => :'federal_district',
        :'fire_district' => :'fire_district',
        :'first_name' => :'first_name',
        :'is_volunteer' => :'is_volunteer',
        :'judicial_district' => :'judicial_district',
        :'labour_region' => :'labour_region',
        :'last_name' => :'last_name',
        :'mobile_number' => :'mobile_number',
        :'mobile_opt_in' => :'mobile_opt_in',
        :'middle_name' => :'middle_name',
        :'ngp_id' => :'ngp_id',
        :'note' => :'note',
        :'occupation' => :'occupation',
        :'party' => :'party',
        :'pf_strat_id' => :'pf_strat_id',
        :'phone_number' => :'phone_number',
        :'precinct_id' => :'precinct_id',
        :'recruiter_id' => :'recruiter_id',
        :'rnc_id' => :'rnc_id',
        :'rnc_regid' => :'rnc_regid',
        :'salesforce_id' => :'salesforce_id',
        :'school_district' => :'school_district',
        :'school_sub_district' => :'school_sub_district',
        :'sex' => :'sex',
        :'signup_type' => :'signup_type',
        :'state_file_id' => :'state_file_id',
        :'state_lower_district' => :'state_lower_district',
        :'state_upper_district' => :'state_upper_district',
        :'support_level' => :'support_level',
        :'supranational_district' => :'supranational_district',
        :'van_id' => :'van_id',
        :'village_district' => :'village_district',
        :'ward' => :'ward',
        :'work_phone_number' => :'work_phone_number',
        :'author_id' => :'author_id',
        :'availability' => :'availability',
        :'banned_at' => :'banned_at',
        :'capital_amount_in_cents' => :'capital_amount_in_cents',
        :'church' => :'church',
        :'city_sub_district' => :'city_sub_district',
        :'contact_status' => :'contact_status',
        :'could_vote_status' => :'could_vote_status',
        :'demo' => :'demo',
        :'donations_amount_in_cents' => :'donations_amount_in_cents',
        :'donations_amount_this_cycle_in_cents' => :'donations_amount_this_cycle_in_cents',
        :'donations_count' => :'donations_count',
        :'donations_count_this_cycle' => :'donations_count_this_cycle',
        :'donations_pledged_amount_in_cents' => :'donations_pledged_amount_in_cents',
        :'donations_raised_amount_in_cents' => :'donations_raised_amount_in_cents',
        :'donations_raised_amount_this_cycle_in_cents' => :'donations_raised_amount_this_cycle_in_cents',
        :'donations_raised_count' => :'donations_raised_count',
        :'donations_raised_count_this_cycle' => :'donations_raised_count_this_cycle',
        :'donations_to_raise_amount_in_cents' => :'donations_to_raise_amount_in_cents',
        :'email1' => :'email1',
        :'email1_is_bad' => :'email1_is_bad',
        :'email2' => :'email2',
        :'email2_is_bad' => :'email2_is_bad',
        :'email3' => :'email3',
        :'email3_is_bad' => :'email3_is_bad',
        :'email4' => :'email4',
        :'email4_is_bad' => :'email4_is_bad',
        :'ethnicity' => :'ethnicity',
        :'fax_number' => :'fax_number',
        :'federal_donotcall' => :'federal_donotcall',
        :'first_donated_at' => :'first_donated_at',
        :'first_fundraised_at' => :'first_fundraised_at',
        :'first_prospect_at' => :'first_prospect_at',
        :'first_recruited_at' => :'first_recruited_at',
        :'first_supporter_at' => :'first_supporter_at',
        :'first_volunteer_at' => :'first_volunteer_at',
        :'import_id' => :'import_id',
        :'inferred_party' => :'inferred_party',
        :'inferred_support_level' => :'inferred_support_level',
        :'is_deceased' => :'is_deceased',
        :'is_fundraiser' => :'is_fundraiser',
        :'is_ignore_donation_limits' => :'is_ignore_donation_limits',
        :'is_leaderboardable' => :'is_leaderboardable',
        :'is_mobile_bad' => :'is_mobile_bad',
        :'is_possible_duplicate' => :'is_possible_duplicate',
        :'is_profile_private' => :'is_profile_private',
        :'is_profile_searchable' => :'is_profile_searchable',
        :'is_prospect' => :'is_prospect',
        :'is_supporter' => :'is_supporter',
        :'is_survey_question_private' => :'is_survey_question_private',
        :'language' => :'language',
        :'last_call_id' => :'last_call_id',
        :'last_contacted_at' => :'last_contacted_at',
        :'last_contacted_by_id' => :'last_contacted_by_id',
        :'last_donated_at' => :'last_donated_at',
        :'last_fundraised_at' => :'last_fundraised_at',
        :'last_rule_violation_at' => :'last_rule_violation_at',
        :'legal_name' => :'legal_name',
        :'locale' => :'locale',
        :'marital_status' => :'marital_status',
        :'parent_id' => :'parent_id',
        :'party_member' => :'party_member',
        :'phone_time' => :'phone_time',
        :'prefix' => :'prefix',
        :'previous_party' => :'previous_party',
        :'primary_email_id' => :'primary_email_id',
        :'priority_level' => :'priority_level',
        :'profile_content' => :'profile_content',
        :'profile_headline' => :'profile_headline',
        :'received_capital_amount_in_cents' => :'received_capital_amount_in_cents',
        :'registered_at' => :'registered_at',
        :'religion' => :'religion',
        :'rule_violations_count' => :'rule_violations_count',
        :'spent_capital_amount_in_cents' => :'spent_capital_amount_in_cents',
        :'submitted_address' => :'submitted_address',
        :'suffix' => :'suffix',
        :'township' => :'township',
        :'unsubscribed_at' => :'unsubscribed_at',
        :'username' => :'username',
        :'warnings_count' => :'warnings_count',
        :'custom_values' => :'custom_values',
        :'email1_is_bouncing' => :'email1_is_bouncing',
        :'email2_is_bouncing' => :'email2_is_bouncing',
        :'email3_is_bouncing' => :'email3_is_bouncing',
        :'email4_is_bouncing' => :'email4_is_bouncing',
        :'full_name' => :'full_name',
        :'is_cpu' => :'is_cpu',
        :'is_donor' => :'is_donor',
        :'note_updated_at' => :'note_updated_at',
        :'priority_level_changed_at' => :'priority_level_changed_at',
        :'profile_content_html' => :'profile_content_html',
        :'support_level_changed_at' => :'support_level_changed_at',
        :'updated_at' => :'updated_at',
        :'created_at' => :'created_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'born_at' => :'String',
        :'city_district' => :'String',
        :'civicrm_id' => :'String',
        :'county_district' => :'String',
        :'county_file_id' => :'String',
        :'datatrust_id' => :'String',
        :'do_not_call' => :'Boolean',
        :'do_not_contact' => :'Boolean',
        :'dw_id' => :'String',
        :'email' => :'String',
        :'email_opt_in' => :'Boolean',
        :'employer' => :'String',
        :'external_id' => :'String',
        :'federal_district' => :'String',
        :'fire_district' => :'String',
        :'first_name' => :'String',
        :'is_volunteer' => :'Boolean',
        :'judicial_district' => :'String',
        :'labour_region' => :'String',
        :'last_name' => :'String',
        :'mobile_number' => :'String',
        :'mobile_opt_in' => :'Boolean',
        :'middle_name' => :'String',
        :'ngp_id' => :'String',
        :'note' => :'String',
        :'occupation' => :'String',
        :'party' => :'String',
        :'pf_strat_id' => :'String',
        :'phone_number' => :'String',
        :'precinct_id' => :'String',
        :'recruiter_id' => :'String',
        :'rnc_id' => :'String',
        :'rnc_regid' => :'String',
        :'salesforce_id' => :'String',
        :'school_district' => :'String',
        :'school_sub_district' => :'String',
        :'sex' => :'String',
        :'signup_type' => :'Integer',
        :'state_file_id' => :'String',
        :'state_lower_district' => :'String',
        :'state_upper_district' => :'String',
        :'support_level' => :'Integer',
        :'supranational_district' => :'String',
        :'van_id' => :'String',
        :'village_district' => :'String',
        :'ward' => :'String',
        :'work_phone_number' => :'String',
        :'author_id' => :'String',
        :'availability' => :'String',
        :'banned_at' => :'String',
        :'capital_amount_in_cents' => :'Integer',
        :'church' => :'String',
        :'city_sub_district' => :'String',
        :'contact_status' => :'String',
        :'could_vote_status' => :'Integer',
        :'demo' => :'String',
        :'donations_amount_in_cents' => :'Integer',
        :'donations_amount_this_cycle_in_cents' => :'Integer',
        :'donations_count' => :'Integer',
        :'donations_count_this_cycle' => :'Integer',
        :'donations_pledged_amount_in_cents' => :'Integer',
        :'donations_raised_amount_in_cents' => :'Integer',
        :'donations_raised_amount_this_cycle_in_cents' => :'Integer',
        :'donations_raised_count' => :'Integer',
        :'donations_raised_count_this_cycle' => :'Integer',
        :'donations_to_raise_amount_in_cents' => :'Integer',
        :'email1' => :'String',
        :'email1_is_bad' => :'Boolean',
        :'email2' => :'String',
        :'email2_is_bad' => :'Boolean',
        :'email3' => :'String',
        :'email3_is_bad' => :'Boolean',
        :'email4' => :'String',
        :'email4_is_bad' => :'Boolean',
        :'ethnicity' => :'String',
        :'fax_number' => :'String',
        :'federal_donotcall' => :'Boolean',
        :'first_donated_at' => :'String',
        :'first_fundraised_at' => :'String',
        :'first_prospect_at' => :'String',
        :'first_recruited_at' => :'String',
        :'first_supporter_at' => :'String',
        :'first_volunteer_at' => :'String',
        :'import_id' => :'String',
        :'inferred_party' => :'String',
        :'inferred_support_level' => :'Integer',
        :'is_deceased' => :'Boolean',
        :'is_fundraiser' => :'Boolean',
        :'is_ignore_donation_limits' => :'Boolean',
        :'is_leaderboardable' => :'Boolean',
        :'is_mobile_bad' => :'Boolean',
        :'is_possible_duplicate' => :'Boolean',
        :'is_profile_private' => :'Boolean',
        :'is_profile_searchable' => :'Boolean',
        :'is_prospect' => :'Boolean',
        :'is_supporter' => :'Boolean',
        :'is_survey_question_private' => :'Boolean',
        :'language' => :'String',
        :'last_call_id' => :'String',
        :'last_contacted_at' => :'String',
        :'last_contacted_by_id' => :'String',
        :'last_donated_at' => :'String',
        :'last_fundraised_at' => :'String',
        :'last_rule_violation_at' => :'String',
        :'legal_name' => :'String',
        :'locale' => :'String',
        :'marital_status' => :'String',
        :'parent_id' => :'String',
        :'party_member' => :'Boolean',
        :'phone_time' => :'String',
        :'prefix' => :'String',
        :'previous_party' => :'String',
        :'primary_email_id' => :'Integer',
        :'priority_level' => :'Integer',
        :'profile_content' => :'String',
        :'profile_headline' => :'String',
        :'received_capital_amount_in_cents' => :'Integer',
        :'registered_at' => :'String',
        :'religion' => :'String',
        :'rule_violations_count' => :'Integer',
        :'spent_capital_amount_in_cents' => :'Integer',
        :'submitted_address' => :'String',
        :'suffix' => :'String',
        :'township' => :'String',
        :'unsubscribed_at' => :'String',
        :'username' => :'String',
        :'warnings_count' => :'Integer',
        :'custom_values' => :'Object',
        :'email1_is_bouncing' => :'Boolean',
        :'email2_is_bouncing' => :'Boolean',
        :'email3_is_bouncing' => :'Boolean',
        :'email4_is_bouncing' => :'Boolean',
        :'full_name' => :'String',
        :'is_cpu' => :'Boolean',
        :'is_donor' => :'Boolean',
        :'note_updated_at' => :'String',
        :'priority_level_changed_at' => :'String',
        :'profile_content_html' => :'String',
        :'support_level_changed_at' => :'String',
        :'updated_at' => :'String',
        :'created_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'born_at',
        :'city_district',
        :'civicrm_id',
        :'county_district',
        :'county_file_id',
        :'datatrust_id',
        :'do_not_call',
        :'do_not_contact',
        :'dw_id',
        :'email',
        :'email_opt_in',
        :'employer',
        :'external_id',
        :'federal_district',
        :'fire_district',
        :'first_name',
        :'is_volunteer',
        :'judicial_district',
        :'labour_region',
        :'last_name',
        :'mobile_number',
        :'mobile_opt_in',
        :'middle_name',
        :'ngp_id',
        :'note',
        :'occupation',
        :'party',
        :'pf_strat_id',
        :'phone_number',
        :'precinct_id',
        :'recruiter_id',
        :'rnc_id',
        :'rnc_regid',
        :'salesforce_id',
        :'school_district',
        :'school_sub_district',
        :'sex',
        :'state_file_id',
        :'state_lower_district',
        :'state_upper_district',
        :'support_level',
        :'supranational_district',
        :'van_id',
        :'village_district',
        :'ward',
        :'work_phone_number',
        :'author_id',
        :'availability',
        :'banned_at',
        :'capital_amount_in_cents',
        :'church',
        :'city_sub_district',
        :'contact_status',
        :'could_vote_status',
        :'demo',
        :'donations_amount_in_cents',
        :'donations_amount_this_cycle_in_cents',
        :'donations_count',
        :'donations_count_this_cycle',
        :'donations_pledged_amount_in_cents',
        :'donations_raised_amount_in_cents',
        :'donations_raised_amount_this_cycle_in_cents',
        :'donations_raised_count',
        :'donations_raised_count_this_cycle',
        :'donations_to_raise_amount_in_cents',
        :'email1',
        :'email1_is_bad',
        :'email2',
        :'email2_is_bad',
        :'email3',
        :'email3_is_bad',
        :'email4',
        :'email4_is_bad',
        :'ethnicity',
        :'fax_number',
        :'federal_donotcall',
        :'first_donated_at',
        :'first_fundraised_at',
        :'first_prospect_at',
        :'first_recruited_at',
        :'first_supporter_at',
        :'first_volunteer_at',
        :'import_id',
        :'inferred_party',
        :'inferred_support_level',
        :'is_deceased',
        :'is_fundraiser',
        :'is_ignore_donation_limits',
        :'is_leaderboardable',
        :'is_mobile_bad',
        :'is_possible_duplicate',
        :'is_profile_private',
        :'is_profile_searchable',
        :'is_prospect',
        :'is_supporter',
        :'is_survey_question_private',
        :'language',
        :'last_call_id',
        :'last_contacted_at',
        :'last_contacted_by_id',
        :'last_donated_at',
        :'last_fundraised_at',
        :'last_rule_violation_at',
        :'legal_name',
        :'locale',
        :'marital_status',
        :'parent_id',
        :'party_member',
        :'phone_time',
        :'prefix',
        :'previous_party',
        :'primary_email_id',
        :'priority_level',
        :'profile_content',
        :'profile_headline',
        :'received_capital_amount_in_cents',
        :'registered_at',
        :'religion',
        :'rule_violations_count',
        :'spent_capital_amount_in_cents',
        :'submitted_address',
        :'suffix',
        :'township',
        :'unsubscribed_at',
        :'username',
        :'warnings_count',
        :'custom_values',
        :'email1_is_bouncing',
        :'email2_is_bouncing',
        :'email3_is_bouncing',
        :'email4_is_bouncing',
        :'full_name',
        :'is_cpu',
        :'is_donor',
        :'note_updated_at',
        :'priority_level_changed_at',
        :'profile_content_html',
        :'support_level_changed_at',
        :'updated_at',
        :'created_at'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'SignupReadOnlyAttributes',
      :'SignupReadWriteAttributes'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::SignupResponseDataAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::SignupResponseDataAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'born_at')
        self.born_at = attributes[:'born_at']
      end

      if attributes.key?(:'city_district')
        self.city_district = attributes[:'city_district']
      end

      if attributes.key?(:'civicrm_id')
        self.civicrm_id = attributes[:'civicrm_id']
      end

      if attributes.key?(:'county_district')
        self.county_district = attributes[:'county_district']
      end

      if attributes.key?(:'county_file_id')
        self.county_file_id = attributes[:'county_file_id']
      end

      if attributes.key?(:'datatrust_id')
        self.datatrust_id = attributes[:'datatrust_id']
      end

      if attributes.key?(:'do_not_call')
        self.do_not_call = attributes[:'do_not_call']
      else
        self.do_not_call = false
      end

      if attributes.key?(:'do_not_contact')
        self.do_not_contact = attributes[:'do_not_contact']
      else
        self.do_not_contact = false
      end

      if attributes.key?(:'dw_id')
        self.dw_id = attributes[:'dw_id']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_opt_in')
        self.email_opt_in = attributes[:'email_opt_in']
      else
        self.email_opt_in = true
      end

      if attributes.key?(:'employer')
        self.employer = attributes[:'employer']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'federal_district')
        self.federal_district = attributes[:'federal_district']
      end

      if attributes.key?(:'fire_district')
        self.fire_district = attributes[:'fire_district']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'is_volunteer')
        self.is_volunteer = attributes[:'is_volunteer']
      else
        self.is_volunteer = false
      end

      if attributes.key?(:'judicial_district')
        self.judicial_district = attributes[:'judicial_district']
      end

      if attributes.key?(:'labour_region')
        self.labour_region = attributes[:'labour_region']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'mobile_number')
        self.mobile_number = attributes[:'mobile_number']
      end

      if attributes.key?(:'mobile_opt_in')
        self.mobile_opt_in = attributes[:'mobile_opt_in']
      else
        self.mobile_opt_in = true
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'ngp_id')
        self.ngp_id = attributes[:'ngp_id']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'occupation')
        self.occupation = attributes[:'occupation']
      end

      if attributes.key?(:'party')
        self.party = attributes[:'party']
      end

      if attributes.key?(:'pf_strat_id')
        self.pf_strat_id = attributes[:'pf_strat_id']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'precinct_id')
        self.precinct_id = attributes[:'precinct_id']
      end

      if attributes.key?(:'recruiter_id')
        self.recruiter_id = attributes[:'recruiter_id']
      end

      if attributes.key?(:'rnc_id')
        self.rnc_id = attributes[:'rnc_id']
      end

      if attributes.key?(:'rnc_regid')
        self.rnc_regid = attributes[:'rnc_regid']
      end

      if attributes.key?(:'salesforce_id')
        self.salesforce_id = attributes[:'salesforce_id']
      end

      if attributes.key?(:'school_district')
        self.school_district = attributes[:'school_district']
      end

      if attributes.key?(:'school_sub_district')
        self.school_sub_district = attributes[:'school_sub_district']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'signup_type')
        self.signup_type = attributes[:'signup_type']
      else
        self.signup_type = 0
      end

      if attributes.key?(:'state_file_id')
        self.state_file_id = attributes[:'state_file_id']
      end

      if attributes.key?(:'state_lower_district')
        self.state_lower_district = attributes[:'state_lower_district']
      end

      if attributes.key?(:'state_upper_district')
        self.state_upper_district = attributes[:'state_upper_district']
      end

      if attributes.key?(:'support_level')
        self.support_level = attributes[:'support_level']
      end

      if attributes.key?(:'supranational_district')
        self.supranational_district = attributes[:'supranational_district']
      end

      if attributes.key?(:'van_id')
        self.van_id = attributes[:'van_id']
      end

      if attributes.key?(:'village_district')
        self.village_district = attributes[:'village_district']
      end

      if attributes.key?(:'ward')
        self.ward = attributes[:'ward']
      end

      if attributes.key?(:'work_phone_number')
        self.work_phone_number = attributes[:'work_phone_number']
      end

      if attributes.key?(:'author_id')
        self.author_id = attributes[:'author_id']
      end

      if attributes.key?(:'availability')
        self.availability = attributes[:'availability']
      end

      if attributes.key?(:'banned_at')
        self.banned_at = attributes[:'banned_at']
      end

      if attributes.key?(:'capital_amount_in_cents')
        self.capital_amount_in_cents = attributes[:'capital_amount_in_cents']
      else
        self.capital_amount_in_cents = 0
      end

      if attributes.key?(:'church')
        self.church = attributes[:'church']
      end

      if attributes.key?(:'city_sub_district')
        self.city_sub_district = attributes[:'city_sub_district']
      end

      if attributes.key?(:'contact_status')
        self.contact_status = attributes[:'contact_status']
      end

      if attributes.key?(:'could_vote_status')
        self.could_vote_status = attributes[:'could_vote_status']
      end

      if attributes.key?(:'demo')
        self.demo = attributes[:'demo']
      end

      if attributes.key?(:'donations_amount_in_cents')
        self.donations_amount_in_cents = attributes[:'donations_amount_in_cents']
      else
        self.donations_amount_in_cents = 0
      end

      if attributes.key?(:'donations_amount_this_cycle_in_cents')
        self.donations_amount_this_cycle_in_cents = attributes[:'donations_amount_this_cycle_in_cents']
      else
        self.donations_amount_this_cycle_in_cents = 0
      end

      if attributes.key?(:'donations_count')
        self.donations_count = attributes[:'donations_count']
      else
        self.donations_count = 0
      end

      if attributes.key?(:'donations_count_this_cycle')
        self.donations_count_this_cycle = attributes[:'donations_count_this_cycle']
      else
        self.donations_count_this_cycle = 0
      end

      if attributes.key?(:'donations_pledged_amount_in_cents')
        self.donations_pledged_amount_in_cents = attributes[:'donations_pledged_amount_in_cents']
      else
        self.donations_pledged_amount_in_cents = 0
      end

      if attributes.key?(:'donations_raised_amount_in_cents')
        self.donations_raised_amount_in_cents = attributes[:'donations_raised_amount_in_cents']
      else
        self.donations_raised_amount_in_cents = 0
      end

      if attributes.key?(:'donations_raised_amount_this_cycle_in_cents')
        self.donations_raised_amount_this_cycle_in_cents = attributes[:'donations_raised_amount_this_cycle_in_cents']
      else
        self.donations_raised_amount_this_cycle_in_cents = 0
      end

      if attributes.key?(:'donations_raised_count')
        self.donations_raised_count = attributes[:'donations_raised_count']
      else
        self.donations_raised_count = 0
      end

      if attributes.key?(:'donations_raised_count_this_cycle')
        self.donations_raised_count_this_cycle = attributes[:'donations_raised_count_this_cycle']
      else
        self.donations_raised_count_this_cycle = 0
      end

      if attributes.key?(:'donations_to_raise_amount_in_cents')
        self.donations_to_raise_amount_in_cents = attributes[:'donations_to_raise_amount_in_cents']
      else
        self.donations_to_raise_amount_in_cents = 0
      end

      if attributes.key?(:'email1')
        self.email1 = attributes[:'email1']
      end

      if attributes.key?(:'email1_is_bad')
        self.email1_is_bad = attributes[:'email1_is_bad']
      else
        self.email1_is_bad = false
      end

      if attributes.key?(:'email2')
        self.email2 = attributes[:'email2']
      end

      if attributes.key?(:'email2_is_bad')
        self.email2_is_bad = attributes[:'email2_is_bad']
      else
        self.email2_is_bad = false
      end

      if attributes.key?(:'email3')
        self.email3 = attributes[:'email3']
      end

      if attributes.key?(:'email3_is_bad')
        self.email3_is_bad = attributes[:'email3_is_bad']
      else
        self.email3_is_bad = false
      end

      if attributes.key?(:'email4')
        self.email4 = attributes[:'email4']
      end

      if attributes.key?(:'email4_is_bad')
        self.email4_is_bad = attributes[:'email4_is_bad']
      else
        self.email4_is_bad = false
      end

      if attributes.key?(:'ethnicity')
        self.ethnicity = attributes[:'ethnicity']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'federal_donotcall')
        self.federal_donotcall = attributes[:'federal_donotcall']
      else
        self.federal_donotcall = false
      end

      if attributes.key?(:'first_donated_at')
        self.first_donated_at = attributes[:'first_donated_at']
      end

      if attributes.key?(:'first_fundraised_at')
        self.first_fundraised_at = attributes[:'first_fundraised_at']
      end

      if attributes.key?(:'first_prospect_at')
        self.first_prospect_at = attributes[:'first_prospect_at']
      end

      if attributes.key?(:'first_recruited_at')
        self.first_recruited_at = attributes[:'first_recruited_at']
      end

      if attributes.key?(:'first_supporter_at')
        self.first_supporter_at = attributes[:'first_supporter_at']
      end

      if attributes.key?(:'first_volunteer_at')
        self.first_volunteer_at = attributes[:'first_volunteer_at']
      end

      if attributes.key?(:'import_id')
        self.import_id = attributes[:'import_id']
      end

      if attributes.key?(:'inferred_party')
        self.inferred_party = attributes[:'inferred_party']
      end

      if attributes.key?(:'inferred_support_level')
        self.inferred_support_level = attributes[:'inferred_support_level']
      end

      if attributes.key?(:'is_deceased')
        self.is_deceased = attributes[:'is_deceased']
      else
        self.is_deceased = false
      end

      if attributes.key?(:'is_fundraiser')
        self.is_fundraiser = attributes[:'is_fundraiser']
      else
        self.is_fundraiser = false
      end

      if attributes.key?(:'is_ignore_donation_limits')
        self.is_ignore_donation_limits = attributes[:'is_ignore_donation_limits']
      else
        self.is_ignore_donation_limits = false
      end

      if attributes.key?(:'is_leaderboardable')
        self.is_leaderboardable = attributes[:'is_leaderboardable']
      else
        self.is_leaderboardable = true
      end

      if attributes.key?(:'is_mobile_bad')
        self.is_mobile_bad = attributes[:'is_mobile_bad']
      else
        self.is_mobile_bad = false
      end

      if attributes.key?(:'is_possible_duplicate')
        self.is_possible_duplicate = attributes[:'is_possible_duplicate']
      else
        self.is_possible_duplicate = false
      end

      if attributes.key?(:'is_profile_private')
        self.is_profile_private = attributes[:'is_profile_private']
      else
        self.is_profile_private = false
      end

      if attributes.key?(:'is_profile_searchable')
        self.is_profile_searchable = attributes[:'is_profile_searchable']
      else
        self.is_profile_searchable = true
      end

      if attributes.key?(:'is_prospect')
        self.is_prospect = attributes[:'is_prospect']
      else
        self.is_prospect = false
      end

      if attributes.key?(:'is_supporter')
        self.is_supporter = attributes[:'is_supporter']
      else
        self.is_supporter = true
      end

      if attributes.key?(:'is_survey_question_private')
        self.is_survey_question_private = attributes[:'is_survey_question_private']
      else
        self.is_survey_question_private = false
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'last_call_id')
        self.last_call_id = attributes[:'last_call_id']
      end

      if attributes.key?(:'last_contacted_at')
        self.last_contacted_at = attributes[:'last_contacted_at']
      end

      if attributes.key?(:'last_contacted_by_id')
        self.last_contacted_by_id = attributes[:'last_contacted_by_id']
      end

      if attributes.key?(:'last_donated_at')
        self.last_donated_at = attributes[:'last_donated_at']
      end

      if attributes.key?(:'last_fundraised_at')
        self.last_fundraised_at = attributes[:'last_fundraised_at']
      end

      if attributes.key?(:'last_rule_violation_at')
        self.last_rule_violation_at = attributes[:'last_rule_violation_at']
      end

      if attributes.key?(:'legal_name')
        self.legal_name = attributes[:'legal_name']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'party_member')
        self.party_member = attributes[:'party_member']
      end

      if attributes.key?(:'phone_time')
        self.phone_time = attributes[:'phone_time']
      end

      if attributes.key?(:'prefix')
        self.prefix = attributes[:'prefix']
      end

      if attributes.key?(:'previous_party')
        self.previous_party = attributes[:'previous_party']
      end

      if attributes.key?(:'primary_email_id')
        self.primary_email_id = attributes[:'primary_email_id']
      else
        self.primary_email_id = PRIMARY_EMAIL_ID::N1
      end

      if attributes.key?(:'priority_level')
        self.priority_level = attributes[:'priority_level']
      end

      if attributes.key?(:'profile_content')
        self.profile_content = attributes[:'profile_content']
      end

      if attributes.key?(:'profile_headline')
        self.profile_headline = attributes[:'profile_headline']
      end

      if attributes.key?(:'received_capital_amount_in_cents')
        self.received_capital_amount_in_cents = attributes[:'received_capital_amount_in_cents']
      else
        self.received_capital_amount_in_cents = 0
      end

      if attributes.key?(:'registered_at')
        self.registered_at = attributes[:'registered_at']
      end

      if attributes.key?(:'religion')
        self.religion = attributes[:'religion']
      end

      if attributes.key?(:'rule_violations_count')
        self.rule_violations_count = attributes[:'rule_violations_count']
      else
        self.rule_violations_count = 0
      end

      if attributes.key?(:'spent_capital_amount_in_cents')
        self.spent_capital_amount_in_cents = attributes[:'spent_capital_amount_in_cents']
      else
        self.spent_capital_amount_in_cents = 0
      end

      if attributes.key?(:'submitted_address')
        self.submitted_address = attributes[:'submitted_address']
      end

      if attributes.key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end

      if attributes.key?(:'township')
        self.township = attributes[:'township']
      end

      if attributes.key?(:'unsubscribed_at')
        self.unsubscribed_at = attributes[:'unsubscribed_at']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'warnings_count')
        self.warnings_count = attributes[:'warnings_count']
      else
        self.warnings_count = 0
      end

      if attributes.key?(:'custom_values')
        self.custom_values = attributes[:'custom_values']
      end

      if attributes.key?(:'email1_is_bouncing')
        self.email1_is_bouncing = attributes[:'email1_is_bouncing']
      end

      if attributes.key?(:'email2_is_bouncing')
        self.email2_is_bouncing = attributes[:'email2_is_bouncing']
      end

      if attributes.key?(:'email3_is_bouncing')
        self.email3_is_bouncing = attributes[:'email3_is_bouncing']
      end

      if attributes.key?(:'email4_is_bouncing')
        self.email4_is_bouncing = attributes[:'email4_is_bouncing']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'is_cpu')
        self.is_cpu = attributes[:'is_cpu']
      end

      if attributes.key?(:'is_donor')
        self.is_donor = attributes[:'is_donor']
      end

      if attributes.key?(:'note_updated_at')
        self.note_updated_at = attributes[:'note_updated_at']
      end

      if attributes.key?(:'priority_level_changed_at')
        self.priority_level_changed_at = attributes[:'priority_level_changed_at']
      end

      if attributes.key?(:'profile_content_html')
        self.profile_content_html = attributes[:'profile_content_html']
      end

      if attributes.key?(:'support_level_changed_at')
        self.support_level_changed_at = attributes[:'support_level_changed_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      contact_status_validator = EnumAttributeValidator.new('String', ["other", "answered", "bad_info", "left_message", "meaningful_interaction", "send_information", "not_interested", "no_answer", "refused", "inaccessible"])
      return false unless contact_status_validator.valid?(@contact_status)
      primary_email_id_validator = EnumAttributeValidator.new('Integer', [1, 2, 3, 4])
      return false unless primary_email_id_validator.valid?(@primary_email_id)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contact_status Object to be assigned
    def contact_status=(contact_status)
      validator = EnumAttributeValidator.new('String', ["other", "answered", "bad_info", "left_message", "meaningful_interaction", "send_information", "not_interested", "no_answer", "refused", "inaccessible"])
      unless validator.valid?(contact_status)
        fail ArgumentError, "invalid value for \"contact_status\", must be one of #{validator.allowable_values}."
      end
      @contact_status = contact_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_email_id Object to be assigned
    def primary_email_id=(primary_email_id)
      validator = EnumAttributeValidator.new('Integer', [1, 2, 3, 4])
      unless validator.valid?(primary_email_id)
        fail ArgumentError, "invalid value for \"primary_email_id\", must be one of #{validator.allowable_values}."
      end
      @primary_email_id = primary_email_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          born_at == o.born_at &&
          city_district == o.city_district &&
          civicrm_id == o.civicrm_id &&
          county_district == o.county_district &&
          county_file_id == o.county_file_id &&
          datatrust_id == o.datatrust_id &&
          do_not_call == o.do_not_call &&
          do_not_contact == o.do_not_contact &&
          dw_id == o.dw_id &&
          email == o.email &&
          email_opt_in == o.email_opt_in &&
          employer == o.employer &&
          external_id == o.external_id &&
          federal_district == o.federal_district &&
          fire_district == o.fire_district &&
          first_name == o.first_name &&
          is_volunteer == o.is_volunteer &&
          judicial_district == o.judicial_district &&
          labour_region == o.labour_region &&
          last_name == o.last_name &&
          mobile_number == o.mobile_number &&
          mobile_opt_in == o.mobile_opt_in &&
          middle_name == o.middle_name &&
          ngp_id == o.ngp_id &&
          note == o.note &&
          occupation == o.occupation &&
          party == o.party &&
          pf_strat_id == o.pf_strat_id &&
          phone_number == o.phone_number &&
          precinct_id == o.precinct_id &&
          recruiter_id == o.recruiter_id &&
          rnc_id == o.rnc_id &&
          rnc_regid == o.rnc_regid &&
          salesforce_id == o.salesforce_id &&
          school_district == o.school_district &&
          school_sub_district == o.school_sub_district &&
          sex == o.sex &&
          signup_type == o.signup_type &&
          state_file_id == o.state_file_id &&
          state_lower_district == o.state_lower_district &&
          state_upper_district == o.state_upper_district &&
          support_level == o.support_level &&
          supranational_district == o.supranational_district &&
          van_id == o.van_id &&
          village_district == o.village_district &&
          ward == o.ward &&
          work_phone_number == o.work_phone_number &&
          author_id == o.author_id &&
          availability == o.availability &&
          banned_at == o.banned_at &&
          capital_amount_in_cents == o.capital_amount_in_cents &&
          church == o.church &&
          city_sub_district == o.city_sub_district &&
          contact_status == o.contact_status &&
          could_vote_status == o.could_vote_status &&
          demo == o.demo &&
          donations_amount_in_cents == o.donations_amount_in_cents &&
          donations_amount_this_cycle_in_cents == o.donations_amount_this_cycle_in_cents &&
          donations_count == o.donations_count &&
          donations_count_this_cycle == o.donations_count_this_cycle &&
          donations_pledged_amount_in_cents == o.donations_pledged_amount_in_cents &&
          donations_raised_amount_in_cents == o.donations_raised_amount_in_cents &&
          donations_raised_amount_this_cycle_in_cents == o.donations_raised_amount_this_cycle_in_cents &&
          donations_raised_count == o.donations_raised_count &&
          donations_raised_count_this_cycle == o.donations_raised_count_this_cycle &&
          donations_to_raise_amount_in_cents == o.donations_to_raise_amount_in_cents &&
          email1 == o.email1 &&
          email1_is_bad == o.email1_is_bad &&
          email2 == o.email2 &&
          email2_is_bad == o.email2_is_bad &&
          email3 == o.email3 &&
          email3_is_bad == o.email3_is_bad &&
          email4 == o.email4 &&
          email4_is_bad == o.email4_is_bad &&
          ethnicity == o.ethnicity &&
          fax_number == o.fax_number &&
          federal_donotcall == o.federal_donotcall &&
          first_donated_at == o.first_donated_at &&
          first_fundraised_at == o.first_fundraised_at &&
          first_prospect_at == o.first_prospect_at &&
          first_recruited_at == o.first_recruited_at &&
          first_supporter_at == o.first_supporter_at &&
          first_volunteer_at == o.first_volunteer_at &&
          import_id == o.import_id &&
          inferred_party == o.inferred_party &&
          inferred_support_level == o.inferred_support_level &&
          is_deceased == o.is_deceased &&
          is_fundraiser == o.is_fundraiser &&
          is_ignore_donation_limits == o.is_ignore_donation_limits &&
          is_leaderboardable == o.is_leaderboardable &&
          is_mobile_bad == o.is_mobile_bad &&
          is_possible_duplicate == o.is_possible_duplicate &&
          is_profile_private == o.is_profile_private &&
          is_profile_searchable == o.is_profile_searchable &&
          is_prospect == o.is_prospect &&
          is_supporter == o.is_supporter &&
          is_survey_question_private == o.is_survey_question_private &&
          language == o.language &&
          last_call_id == o.last_call_id &&
          last_contacted_at == o.last_contacted_at &&
          last_contacted_by_id == o.last_contacted_by_id &&
          last_donated_at == o.last_donated_at &&
          last_fundraised_at == o.last_fundraised_at &&
          last_rule_violation_at == o.last_rule_violation_at &&
          legal_name == o.legal_name &&
          locale == o.locale &&
          marital_status == o.marital_status &&
          parent_id == o.parent_id &&
          party_member == o.party_member &&
          phone_time == o.phone_time &&
          prefix == o.prefix &&
          previous_party == o.previous_party &&
          primary_email_id == o.primary_email_id &&
          priority_level == o.priority_level &&
          profile_content == o.profile_content &&
          profile_headline == o.profile_headline &&
          received_capital_amount_in_cents == o.received_capital_amount_in_cents &&
          registered_at == o.registered_at &&
          religion == o.religion &&
          rule_violations_count == o.rule_violations_count &&
          spent_capital_amount_in_cents == o.spent_capital_amount_in_cents &&
          submitted_address == o.submitted_address &&
          suffix == o.suffix &&
          township == o.township &&
          unsubscribed_at == o.unsubscribed_at &&
          username == o.username &&
          warnings_count == o.warnings_count &&
          custom_values == o.custom_values &&
          email1_is_bouncing == o.email1_is_bouncing &&
          email2_is_bouncing == o.email2_is_bouncing &&
          email3_is_bouncing == o.email3_is_bouncing &&
          email4_is_bouncing == o.email4_is_bouncing &&
          full_name == o.full_name &&
          is_cpu == o.is_cpu &&
          is_donor == o.is_donor &&
          note_updated_at == o.note_updated_at &&
          priority_level_changed_at == o.priority_level_changed_at &&
          profile_content_html == o.profile_content_html &&
          support_level_changed_at == o.support_level_changed_at &&
          updated_at == o.updated_at &&
          created_at == o.created_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [born_at, city_district, civicrm_id, county_district, county_file_id, datatrust_id, do_not_call, do_not_contact, dw_id, email, email_opt_in, employer, external_id, federal_district, fire_district, first_name, is_volunteer, judicial_district, labour_region, last_name, mobile_number, mobile_opt_in, middle_name, ngp_id, note, occupation, party, pf_strat_id, phone_number, precinct_id, recruiter_id, rnc_id, rnc_regid, salesforce_id, school_district, school_sub_district, sex, signup_type, state_file_id, state_lower_district, state_upper_district, support_level, supranational_district, van_id, village_district, ward, work_phone_number, author_id, availability, banned_at, capital_amount_in_cents, church, city_sub_district, contact_status, could_vote_status, demo, donations_amount_in_cents, donations_amount_this_cycle_in_cents, donations_count, donations_count_this_cycle, donations_pledged_amount_in_cents, donations_raised_amount_in_cents, donations_raised_amount_this_cycle_in_cents, donations_raised_count, donations_raised_count_this_cycle, donations_to_raise_amount_in_cents, email1, email1_is_bad, email2, email2_is_bad, email3, email3_is_bad, email4, email4_is_bad, ethnicity, fax_number, federal_donotcall, first_donated_at, first_fundraised_at, first_prospect_at, first_recruited_at, first_supporter_at, first_volunteer_at, import_id, inferred_party, inferred_support_level, is_deceased, is_fundraiser, is_ignore_donation_limits, is_leaderboardable, is_mobile_bad, is_possible_duplicate, is_profile_private, is_profile_searchable, is_prospect, is_supporter, is_survey_question_private, language, last_call_id, last_contacted_at, last_contacted_by_id, last_donated_at, last_fundraised_at, last_rule_violation_at, legal_name, locale, marital_status, parent_id, party_member, phone_time, prefix, previous_party, primary_email_id, priority_level, profile_content, profile_headline, received_capital_amount_in_cents, registered_at, religion, rule_violations_count, spent_capital_amount_in_cents, submitted_address, suffix, township, unsubscribed_at, username, warnings_count, custom_values, email1_is_bouncing, email2_is_bouncing, email3_is_bouncing, email4_is_bouncing, full_name, is_cpu, is_donor, note_updated_at, priority_level_changed_at, profile_content_html, support_level_changed_at, updated_at, created_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
