# #NationBuilder V2 API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require "date"
require "time"

module NationbuilderClient
  class BroadcasterReadOnlyAttributes
    # The name of the broadcaster.
    attr_accessor :name

    # The broadcaster's email address.
    attr_accessor :email

    # The number of email blasts created by the broadcaster.
    attr_accessor :mailings_count

    # The number of text blasts created by the broadcaster.
    attr_accessor :text_blasts_count

    # The number of calls received.
    attr_accessor :received_calls_count

    # Enable BCC for this broadcaster.
    attr_accessor :is_bcc

    # Allow the broadcaster to receive emails.
    attr_accessor :receive_email

    # The point person for the broadcaster.
    attr_accessor :point_person_id

    # Mark interactions with the broadcaster as needing followup.
    attr_accessor :emailers_need_followup

    # Add these tags to signups that interact with this broadcaster. (comma separated list)
    attr_accessor :emailer_tags

    # Signup that belongs to the broadcaster.
    attr_accessor :signup_id

    # The call type that belongs to the broadcaster.
    attr_accessor :call_type_id

    # Mark voicemails received by the broadcaster as needing followup.
    attr_accessor :voicemail_needs_followup

    # The point person responsible for voicemails.
    attr_accessor :voicemail_point_person_id

    # Tag signups that leave voicemails with these tags. (comma separated list)
    attr_accessor :voicemail_tags

    # Mark text received by the broadcaster as needing followup.
    attr_accessor :text_needs_followup

    # The point person responsible for texts.
    attr_accessor :text_point_person_id

    # Tag signups that interact with the broadcaster via text with these tags. (comma separated list)
    attr_accessor :text_tags

    # Signups that email this broadcaster for the first time are marked as a prospect.
    attr_accessor :new_email_sender_marked_as_prospect

    attr_accessor :created_at

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        email: :email,
        mailings_count: :mailings_count,
        text_blasts_count: :text_blasts_count,
        received_calls_count: :received_calls_count,
        is_bcc: :is_bcc,
        receive_email: :receive_email,
        point_person_id: :point_person_id,
        emailers_need_followup: :emailers_need_followup,
        emailer_tags: :emailer_tags,
        signup_id: :signup_id,
        call_type_id: :call_type_id,
        voicemail_needs_followup: :voicemail_needs_followup,
        voicemail_point_person_id: :voicemail_point_person_id,
        voicemail_tags: :voicemail_tags,
        text_needs_followup: :text_needs_followup,
        text_point_person_id: :text_point_person_id,
        text_tags: :text_tags,
        new_email_sender_marked_as_prospect: :new_email_sender_marked_as_prospect,
        created_at: :created_at,
        updated_at: :updated_at
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        email: :String,
        mailings_count: :Integer,
        text_blasts_count: :Integer,
        received_calls_count: :Integer,
        is_bcc: :Boolean,
        receive_email: :Boolean,
        point_person_id: :String,
        emailers_need_followup: :Boolean,
        emailer_tags: :String,
        signup_id: :String,
        call_type_id: :String,
        voicemail_needs_followup: :Boolean,
        voicemail_point_person_id: :String,
        voicemail_tags: :String,
        text_needs_followup: :Boolean,
        text_point_person_id: :String,
        text_tags: :String,
        new_email_sender_marked_as_prospect: :Boolean,
        created_at: :String,
        updated_at: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :name,
        :email,
        :mailings_count,
        :text_blasts_count,
        :received_calls_count,
        :is_bcc,
        :point_person_id,
        :emailer_tags,
        :signup_id,
        :call_type_id,
        :voicemail_needs_followup,
        :voicemail_point_person_id,
        :voicemail_tags,
        :text_needs_followup,
        :text_point_person_id,
        :text_tags,
        :new_email_sender_marked_as_prospect,
        :created_at,
        :updated_at
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if !attributes.is_a?(Hash)
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::BroadcasterReadOnlyAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if !self.class.attribute_map.key?(k.to_sym)
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::BroadcasterReadOnlyAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:name)
        self.name = attributes[:name]
      end

      if attributes.key?(:email)
        self.email = attributes[:email]
      end

      self.mailings_count = if attributes.key?(:mailings_count)
        attributes[:mailings_count]
      else
        0
      end

      self.text_blasts_count = if attributes.key?(:text_blasts_count)
        attributes[:text_blasts_count]
      else
        0
      end

      self.received_calls_count = if attributes.key?(:received_calls_count)
        attributes[:received_calls_count]
      else
        0
      end

      self.is_bcc = if attributes.key?(:is_bcc)
        attributes[:is_bcc]
      else
        false
      end

      self.receive_email = if attributes.key?(:receive_email)
        attributes[:receive_email]
      else
        false
      end

      if attributes.key?(:point_person_id)
        self.point_person_id = attributes[:point_person_id]
      end

      self.emailers_need_followup = if attributes.key?(:emailers_need_followup)
        attributes[:emailers_need_followup]
      else
        false
      end

      if attributes.key?(:emailer_tags)
        self.emailer_tags = attributes[:emailer_tags]
      end

      if attributes.key?(:signup_id)
        self.signup_id = attributes[:signup_id]
      end

      if attributes.key?(:call_type_id)
        self.call_type_id = attributes[:call_type_id]
      end

      if attributes.key?(:voicemail_needs_followup)
        self.voicemail_needs_followup = attributes[:voicemail_needs_followup]
      end

      if attributes.key?(:voicemail_point_person_id)
        self.voicemail_point_person_id = attributes[:voicemail_point_person_id]
      end

      if attributes.key?(:voicemail_tags)
        self.voicemail_tags = attributes[:voicemail_tags]
      end

      if attributes.key?(:text_needs_followup)
        self.text_needs_followup = attributes[:text_needs_followup]
      end

      if attributes.key?(:text_point_person_id)
        self.text_point_person_id = attributes[:text_point_person_id]
      end

      if attributes.key?(:text_tags)
        self.text_tags = attributes[:text_tags]
      end

      self.new_email_sender_marked_as_prospect = if attributes.key?(:new_email_sender_marked_as_prospect)
        attributes[:new_email_sender_marked_as_prospect]
      else
        false
      end

      if attributes.key?(:created_at)
        self.created_at = attributes[:created_at]
      end

      if attributes.key?(:updated_at)
        self.updated_at = attributes[:updated_at]
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn "[DEPRECATED] the `list_invalid_properties` method is obsolete"
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn "[DEPRECATED] the `valid?` method is obsolete"
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
          name == other.name &&
          email == other.email &&
          mailings_count == other.mailings_count &&
          text_blasts_count == other.text_blasts_count &&
          received_calls_count == other.received_calls_count &&
          is_bcc == other.is_bcc &&
          receive_email == other.receive_email &&
          point_person_id == other.point_person_id &&
          emailers_need_followup == other.emailers_need_followup &&
          emailer_tags == other.emailer_tags &&
          signup_id == other.signup_id &&
          call_type_id == other.call_type_id &&
          voicemail_needs_followup == other.voicemail_needs_followup &&
          voicemail_point_person_id == other.voicemail_point_person_id &&
          voicemail_tags == other.voicemail_tags &&
          text_needs_followup == other.text_needs_followup &&
          text_point_person_id == other.text_point_person_id &&
          text_tags == other.text_tags &&
          new_email_sender_marked_as_prospect == other.new_email_sender_marked_as_prospect &&
          created_at == other.created_at &&
          updated_at == other.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, email, mailings_count, text_blasts_count, received_calls_count, is_bcc, receive_email, point_person_id, emailers_need_followup, emailer_tags, signup_id, call_type_id, voicemail_needs_followup, voicemail_point_person_id, voicemail_tags, text_needs_followup, text_point_person_id, text_tags, new_email_sender_marked_as_prospect, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        (klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of)) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
