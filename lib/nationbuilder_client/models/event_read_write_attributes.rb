=begin
#NationBuilder V2 API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NationbuilderClient
  class EventReadWriteAttributes
    # Allows people to RSVP for the event. If set to false, the event will display, but people will not be able to submit an RSVP to it.
    attr_accessor :accept_rsvps

    # Number of offline RSVPs to add to event's total capacity
    attr_accessor :additional_rsvps_count

    # Allows RSVP to enter the number of guests they will bring to the event.
    attr_accessor :allow_guests

    # The number of attendees for the current event.
    attr_accessor :attending_count

    # ID of the broadcaster that the event's auto response will be sent by
    attr_accessor :auto_response_broadcaster_id

    # Email content of the auto response sent people RSVP-ing to the event.
    attr_accessor :auto_response_content

    # Email subject of the auto response sent people RSVP-ing to the event.
    attr_accessor :auto_response_subject

    # The number of RSVPs allowed. If set to 0, there is no limit to number of RSVPs.
    attr_accessor :capacity_count

    # The email address of the contact person.
    attr_accessor :contact_email

    # Flag used to hide the contact person's email address on public event pages.
    attr_accessor :contact_email_private

    # The name of the contact person for the event.
    attr_accessor :contact_name

    # The phone number of the contact person.
    attr_accessor :contact_phone_number

    # Flag used to hide the contact person's phone number on public event pages.
    attr_accessor :contact_phone_private

    # Content displayed on the public event page
    attr_accessor :content

    # ID of the donation tracking code to be associated with ticket purchases for the event
    attr_accessor :donation_tracking_code_id

    # Duration of the event in seconds. Updates the end_at time of the event.
    attr_accessor :duration

    # Attribute used to set address input requirements for RSVPs
    attr_accessor :event_form_address

    # Attribute used to set phone number input requirements for RSVPs
    attr_accessor :event_form_phone

    # Attribute used to ask RSVPs if they want to volunteer in the public event form.
    attr_accessor :gather_volunteers

    # ID of the point person assigned to RSVPs
    attr_accessor :point_person_id

    # When true, the event is hidden in the website
    attr_accessor :private

    # Automatically send person RSVPing an email
    attr_accessor :sends_auto_response

    # Controls where RSVPs are shown on the event page
    attr_accessor :show_guests

    # Start time of the event
    attr_accessor :start_at

    # Time zone the event takes place in
    attr_accessor :time_zone

    # Currency tickets are purchased in. Used only when selling tickets outside of NationBuilder
    attr_accessor :user_ticket_currency

    # Price in cents of the ticket level. Used only when selling tickets outside of NationBuilder
    attr_accessor :user_ticket_price_in_cents

    # URL to third-party seller where tickets are being sold. Used only when selling tickets outside of NationBuilder
    attr_accessor :user_ticket_purchase_url

    # Flag controlling whether RSVPs will be asked to sign up for shifts during the event.
    attr_accessor :uses_shifts

    # Flag controller whether tickets will be sold to people RSVPing to the event
    attr_accessor :uses_tickets

    # Name of the venue
    attr_accessor :venue_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accept_rsvps' => :'accept_rsvps',
        :'additional_rsvps_count' => :'additional_rsvps_count',
        :'allow_guests' => :'allow_guests',
        :'attending_count' => :'attending_count',
        :'auto_response_broadcaster_id' => :'auto_response_broadcaster_id',
        :'auto_response_content' => :'auto_response_content',
        :'auto_response_subject' => :'auto_response_subject',
        :'capacity_count' => :'capacity_count',
        :'contact_email' => :'contact_email',
        :'contact_email_private' => :'contact_email_private',
        :'contact_name' => :'contact_name',
        :'contact_phone_number' => :'contact_phone_number',
        :'contact_phone_private' => :'contact_phone_private',
        :'content' => :'content',
        :'donation_tracking_code_id' => :'donation_tracking_code_id',
        :'duration' => :'duration',
        :'event_form_address' => :'event_form_address',
        :'event_form_phone' => :'event_form_phone',
        :'gather_volunteers' => :'gather_volunteers',
        :'point_person_id' => :'point_person_id',
        :'private' => :'private',
        :'sends_auto_response' => :'sends_auto_response',
        :'show_guests' => :'show_guests',
        :'start_at' => :'start_at',
        :'time_zone' => :'time_zone',
        :'user_ticket_currency' => :'user_ticket_currency',
        :'user_ticket_price_in_cents' => :'user_ticket_price_in_cents',
        :'user_ticket_purchase_url' => :'user_ticket_purchase_url',
        :'uses_shifts' => :'uses_shifts',
        :'uses_tickets' => :'uses_tickets',
        :'venue_name' => :'venue_name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'accept_rsvps' => :'Boolean',
        :'additional_rsvps_count' => :'Integer',
        :'allow_guests' => :'Boolean',
        :'attending_count' => :'Integer',
        :'auto_response_broadcaster_id' => :'String',
        :'auto_response_content' => :'String',
        :'auto_response_subject' => :'String',
        :'capacity_count' => :'Integer',
        :'contact_email' => :'String',
        :'contact_email_private' => :'Boolean',
        :'contact_name' => :'String',
        :'contact_phone_number' => :'String',
        :'contact_phone_private' => :'Boolean',
        :'content' => :'String',
        :'donation_tracking_code_id' => :'String',
        :'duration' => :'Integer',
        :'event_form_address' => :'String',
        :'event_form_phone' => :'String',
        :'gather_volunteers' => :'Boolean',
        :'point_person_id' => :'String',
        :'private' => :'Boolean',
        :'sends_auto_response' => :'Boolean',
        :'show_guests' => :'Boolean',
        :'start_at' => :'String',
        :'time_zone' => :'String',
        :'user_ticket_currency' => :'String',
        :'user_ticket_price_in_cents' => :'Integer',
        :'user_ticket_purchase_url' => :'String',
        :'uses_shifts' => :'Boolean',
        :'uses_tickets' => :'Boolean',
        :'venue_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'additional_rsvps_count',
        :'allow_guests',
        :'attending_count',
        :'auto_response_broadcaster_id',
        :'auto_response_content',
        :'auto_response_subject',
        :'capacity_count',
        :'contact_email',
        :'contact_email_private',
        :'contact_name',
        :'contact_phone_number',
        :'contact_phone_private',
        :'content',
        :'donation_tracking_code_id',
        :'duration',
        :'event_form_address',
        :'event_form_phone',
        :'gather_volunteers',
        :'point_person_id',
        :'private',
        :'sends_auto_response',
        :'show_guests',
        :'start_at',
        :'time_zone',
        :'user_ticket_currency',
        :'user_ticket_price_in_cents',
        :'user_ticket_purchase_url',
        :'uses_shifts',
        :'uses_tickets',
        :'venue_name'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NationbuilderClient::EventReadWriteAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NationbuilderClient::EventReadWriteAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'accept_rsvps')
        self.accept_rsvps = attributes[:'accept_rsvps']
      end

      if attributes.key?(:'additional_rsvps_count')
        self.additional_rsvps_count = attributes[:'additional_rsvps_count']
      end

      if attributes.key?(:'allow_guests')
        self.allow_guests = attributes[:'allow_guests']
      end

      if attributes.key?(:'attending_count')
        self.attending_count = attributes[:'attending_count']
      end

      if attributes.key?(:'auto_response_broadcaster_id')
        self.auto_response_broadcaster_id = attributes[:'auto_response_broadcaster_id']
      end

      if attributes.key?(:'auto_response_content')
        self.auto_response_content = attributes[:'auto_response_content']
      end

      if attributes.key?(:'auto_response_subject')
        self.auto_response_subject = attributes[:'auto_response_subject']
      end

      if attributes.key?(:'capacity_count')
        self.capacity_count = attributes[:'capacity_count']
      end

      if attributes.key?(:'contact_email')
        self.contact_email = attributes[:'contact_email']
      end

      if attributes.key?(:'contact_email_private')
        self.contact_email_private = attributes[:'contact_email_private']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_phone_number')
        self.contact_phone_number = attributes[:'contact_phone_number']
      end

      if attributes.key?(:'contact_phone_private')
        self.contact_phone_private = attributes[:'contact_phone_private']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'donation_tracking_code_id')
        self.donation_tracking_code_id = attributes[:'donation_tracking_code_id']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'event_form_address')
        self.event_form_address = attributes[:'event_form_address']
      end

      if attributes.key?(:'event_form_phone')
        self.event_form_phone = attributes[:'event_form_phone']
      end

      if attributes.key?(:'gather_volunteers')
        self.gather_volunteers = attributes[:'gather_volunteers']
      end

      if attributes.key?(:'point_person_id')
        self.point_person_id = attributes[:'point_person_id']
      end

      if attributes.key?(:'private')
        self.private = attributes[:'private']
      end

      if attributes.key?(:'sends_auto_response')
        self.sends_auto_response = attributes[:'sends_auto_response']
      else
        self.sends_auto_response = true
      end

      if attributes.key?(:'show_guests')
        self.show_guests = attributes[:'show_guests']
      end

      if attributes.key?(:'start_at')
        self.start_at = attributes[:'start_at']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'user_ticket_currency')
        self.user_ticket_currency = attributes[:'user_ticket_currency']
      end

      if attributes.key?(:'user_ticket_price_in_cents')
        self.user_ticket_price_in_cents = attributes[:'user_ticket_price_in_cents']
      end

      if attributes.key?(:'user_ticket_purchase_url')
        self.user_ticket_purchase_url = attributes[:'user_ticket_purchase_url']
      end

      if attributes.key?(:'uses_shifts')
        self.uses_shifts = attributes[:'uses_shifts']
      end

      if attributes.key?(:'uses_tickets')
        self.uses_tickets = attributes[:'uses_tickets']
      end

      if attributes.key?(:'venue_name')
        self.venue_name = attributes[:'venue_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      event_form_address_validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      return false unless event_form_address_validator.valid?(@event_form_address)
      event_form_phone_validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      return false unless event_form_phone_validator.valid?(@event_form_phone)
      time_zone_validator = EnumAttributeValidator.new('String', ["International Date Line West", "American Samoa", "Midway Island", "Hawaii", "Alaska", "Pacific Time (US & Canada)", "Tijuana", "Arizona", "Mazatlan", "Mountain Time (US & Canada)", "Central America", "Central Time (US & Canada)", "Chihuahua", "Guadalajara", "Mexico City", "Monterrey", "Saskatchewan", "Bogota", "Eastern Time (US & Canada)", "Indiana (East)", "Lima", "Quito", "Atlantic Time (Canada)", "Caracas", "Georgetown", "La Paz", "Puerto Rico", "Santiago", "Newfoundland", "Brasilia", "Buenos Aires", "Montevideo", "Greenland", "Mid-Atlantic", "Azores", "Cape Verde Is.", "Edinburgh", "Lisbon", "London", "Monrovia", "UTC", "Amsterdam", "Belgrade", "Berlin", "Bern", "Bratislava", "Brussels", "Budapest", "Casablanca", "Copenhagen", "Dublin", "Ljubljana", "Madrid", "Paris", "Prague", "Rome", "Sarajevo", "Skopje", "Stockholm", "Vienna", "Warsaw", "West Central Africa", "Zagreb", "Zurich", "Athens", "Bucharest", "Cairo", "Harare", "Helsinki", "Jerusalem", "Kaliningrad", "Kyiv", "Pretoria", "Riga", "Sofia", "Tallinn", "Vilnius", "Baghdad", "Istanbul", "Kuwait", "Minsk", "Moscow", "Nairobi", "Riyadh", "St. Petersburg", "Volgograd", "Tehran", "Abu Dhabi", "Baku", "Muscat", "Samara", "Tbilisi", "Yerevan", "Kabul", "Almaty", "Ekaterinburg", "Islamabad", "Karachi", "Tashkent", "Chennai", "Kolkata", "Mumbai", "New Delhi", "Sri Jayawardenepura", "Kathmandu", "Astana", "Dhaka", "Urumqi", "Rangoon", "Bangkok", "Hanoi", "Jakarta", "Krasnoyarsk", "Novosibirsk", "Beijing", "Chongqing", "Hong Kong", "Irkutsk", "Kuala Lumpur", "Perth", "Singapore", "Taipei", "Ulaanbaatar", "Osaka", "Sapporo", "Seoul", "Tokyo", "Yakutsk", "Adelaide", "Darwin", "Brisbane", "Canberra", "Guam", "Hobart", "Melbourne", "Port Moresby", "Sydney", "Vladivostok", "Magadan", "New Caledonia", "Solomon Is.", "Srednekolymsk", "Auckland", "Fiji", "Kamchatka", "Marshall Is.", "Wellington", "Chatham Is.", "Nuku'alofa", "Samoa", "Tokelau Is."])
      return false unless time_zone_validator.valid?(@time_zone)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_form_address Object to be assigned
    def event_form_address=(event_form_address)
      validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      unless validator.valid?(event_form_address)
        fail ArgumentError, "invalid value for \"event_form_address\", must be one of #{validator.allowable_values}."
      end
      @event_form_address = event_form_address
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_form_phone Object to be assigned
    def event_form_phone=(event_form_phone)
      validator = EnumAttributeValidator.new('String', ["required", "optional", "hidden"])
      unless validator.valid?(event_form_phone)
        fail ArgumentError, "invalid value for \"event_form_phone\", must be one of #{validator.allowable_values}."
      end
      @event_form_phone = event_form_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_zone Object to be assigned
    def time_zone=(time_zone)
      validator = EnumAttributeValidator.new('String', ["International Date Line West", "American Samoa", "Midway Island", "Hawaii", "Alaska", "Pacific Time (US & Canada)", "Tijuana", "Arizona", "Mazatlan", "Mountain Time (US & Canada)", "Central America", "Central Time (US & Canada)", "Chihuahua", "Guadalajara", "Mexico City", "Monterrey", "Saskatchewan", "Bogota", "Eastern Time (US & Canada)", "Indiana (East)", "Lima", "Quito", "Atlantic Time (Canada)", "Caracas", "Georgetown", "La Paz", "Puerto Rico", "Santiago", "Newfoundland", "Brasilia", "Buenos Aires", "Montevideo", "Greenland", "Mid-Atlantic", "Azores", "Cape Verde Is.", "Edinburgh", "Lisbon", "London", "Monrovia", "UTC", "Amsterdam", "Belgrade", "Berlin", "Bern", "Bratislava", "Brussels", "Budapest", "Casablanca", "Copenhagen", "Dublin", "Ljubljana", "Madrid", "Paris", "Prague", "Rome", "Sarajevo", "Skopje", "Stockholm", "Vienna", "Warsaw", "West Central Africa", "Zagreb", "Zurich", "Athens", "Bucharest", "Cairo", "Harare", "Helsinki", "Jerusalem", "Kaliningrad", "Kyiv", "Pretoria", "Riga", "Sofia", "Tallinn", "Vilnius", "Baghdad", "Istanbul", "Kuwait", "Minsk", "Moscow", "Nairobi", "Riyadh", "St. Petersburg", "Volgograd", "Tehran", "Abu Dhabi", "Baku", "Muscat", "Samara", "Tbilisi", "Yerevan", "Kabul", "Almaty", "Ekaterinburg", "Islamabad", "Karachi", "Tashkent", "Chennai", "Kolkata", "Mumbai", "New Delhi", "Sri Jayawardenepura", "Kathmandu", "Astana", "Dhaka", "Urumqi", "Rangoon", "Bangkok", "Hanoi", "Jakarta", "Krasnoyarsk", "Novosibirsk", "Beijing", "Chongqing", "Hong Kong", "Irkutsk", "Kuala Lumpur", "Perth", "Singapore", "Taipei", "Ulaanbaatar", "Osaka", "Sapporo", "Seoul", "Tokyo", "Yakutsk", "Adelaide", "Darwin", "Brisbane", "Canberra", "Guam", "Hobart", "Melbourne", "Port Moresby", "Sydney", "Vladivostok", "Magadan", "New Caledonia", "Solomon Is.", "Srednekolymsk", "Auckland", "Fiji", "Kamchatka", "Marshall Is.", "Wellington", "Chatham Is.", "Nuku'alofa", "Samoa", "Tokelau Is."])
      unless validator.valid?(time_zone)
        fail ArgumentError, "invalid value for \"time_zone\", must be one of #{validator.allowable_values}."
      end
      @time_zone = time_zone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accept_rsvps == o.accept_rsvps &&
          additional_rsvps_count == o.additional_rsvps_count &&
          allow_guests == o.allow_guests &&
          attending_count == o.attending_count &&
          auto_response_broadcaster_id == o.auto_response_broadcaster_id &&
          auto_response_content == o.auto_response_content &&
          auto_response_subject == o.auto_response_subject &&
          capacity_count == o.capacity_count &&
          contact_email == o.contact_email &&
          contact_email_private == o.contact_email_private &&
          contact_name == o.contact_name &&
          contact_phone_number == o.contact_phone_number &&
          contact_phone_private == o.contact_phone_private &&
          content == o.content &&
          donation_tracking_code_id == o.donation_tracking_code_id &&
          duration == o.duration &&
          event_form_address == o.event_form_address &&
          event_form_phone == o.event_form_phone &&
          gather_volunteers == o.gather_volunteers &&
          point_person_id == o.point_person_id &&
          private == o.private &&
          sends_auto_response == o.sends_auto_response &&
          show_guests == o.show_guests &&
          start_at == o.start_at &&
          time_zone == o.time_zone &&
          user_ticket_currency == o.user_ticket_currency &&
          user_ticket_price_in_cents == o.user_ticket_price_in_cents &&
          user_ticket_purchase_url == o.user_ticket_purchase_url &&
          uses_shifts == o.uses_shifts &&
          uses_tickets == o.uses_tickets &&
          venue_name == o.venue_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [accept_rsvps, additional_rsvps_count, allow_guests, attending_count, auto_response_broadcaster_id, auto_response_content, auto_response_subject, capacity_count, contact_email, contact_email_private, contact_name, contact_phone_number, contact_phone_private, content, donation_tracking_code_id, duration, event_form_address, event_form_phone, gather_volunteers, point_person_id, private, sends_auto_response, show_guests, start_at, time_zone, user_ticket_currency, user_ticket_price_in_cents, user_ticket_purchase_url, uses_shifts, uses_tickets, venue_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NationbuilderClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
